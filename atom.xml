<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinGet</title>
  
  <subtitle>前端 —— 我一直在路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-03T09:37:35.145Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FinGet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端工程师，揭开HTTP的神秘面纱</title>
    <link href="http://yoursite.com/2018/07/03/http/"/>
    <id>http://yoursite.com/2018/07/03/http/</id>
    <published>2018-07-03T09:25:39.000Z</published>
    <updated>2018-07-03T09:37:35.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器输入URL后HTTP请求返回过程"><a href="#浏览器输入URL后HTTP请求返回过程" class="headerlink" title="浏览器输入URL后HTTP请求返回过程"></a>浏览器输入URL后HTTP请求返回过程</h2><p><img src="https://i.imgur.com/l009YU4.png" alt=""></p><h2 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h2><h3 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h3><p><img src="https://i.imgur.com/Ft5xzr5.gif" alt=""></p><h3 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h3><p>五层协议只是OSI和TCP/IP的综合，实际应用还是TCP/IP的四层结构。</p><p><img src="https://i.imgur.com/FQ3DXON.png" alt=""></p><h3 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h3><blockquote><p>TCP(Transmission Control Protocol)传输控制协议</p></blockquote><p>TCP/IP协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层</p><p><img src="https://i.imgur.com/Ou1tVS9.png" alt=""></p><h3 id="三种模型结构"><a href="#三种模型结构" class="headerlink" title="三种模型结构"></a>三种模型结构</h3><p><img src="https://i.imgur.com/3kS1Oq0.png" alt=""></p><p><img src="https://i.imgur.com/bsWKhAp.png" alt=""></p><h3 id="各层的作用"><a href="#各层的作用" class="headerlink" title="各层的作用"></a>各层的作用</h3><p><img src="https://i.imgur.com/OMCoUox.png" alt=""></p><ol><li><p>物理层：<br>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。 　　</p></li><li><p>数据链路层：<br>定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。 　　</p></li><li><p>网络层：<br>在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。 　　</p></li><li><p>传输层：<br>定义了一些传输数据的协议和端口号（WWW端口80等），如：<br>TCP（transmission control protocol –传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）<br>UDP（user datagram protocol–用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。 　　</p></li><li><p>会话层：<br>通过运输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名） 　　</p></li><li><p>表示层：<br>可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换码（EBCDIC），而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。 　　</p></li><li><p>应用层：<br>是最靠近用户的OSI层。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务。</p></li></ol><h2 id="HTTP-发展历史"><a href="#HTTP-发展历史" class="headerlink" title="HTTP 发展历史"></a>HTTP 发展历史</h2><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><ul><li style="list-style: none"><input type="checkbox" checked> 只有一个命令GET</li><li style="list-style: none"><input type="checkbox" checked> 响应类型: 仅 超文本</li><li style="list-style: none"><input type="checkbox" checked> 没有header等描述数据的信息</li><li style="list-style: none"><input type="checkbox" checked> 服务器发送完毕，就关闭TCP连接</li></ul><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><ul><li style="list-style: none"><input type="checkbox" checked> 增加了很多命令（post HESD ）</li><li style="list-style: none"><input type="checkbox" checked> 增加status code 和 header</li><li style="list-style: none"><input type="checkbox" checked> 多字符集支持、多部分发送、权限、缓存等</li><li style="list-style: none"><input type="checkbox" checked> 响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)</li></ul><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><ul><li style="list-style: none"><input type="checkbox" checked> 持久连接。TCP三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）</li><li style="list-style: none"><input type="checkbox" checked> 支持的方法: <code>GET</code> , <code>HEAD</code> , <code>POST</code> , <code>PUT</code> ,<code>DELETE</code> , <code>TRACE</code> , <code>OPTIONS</code></li><li style="list-style: none"><input type="checkbox" checked> 进行了重大的性能优化和特性增强，分块传输、压缩/解压、内容缓存磋商、虚拟主机（有单个IP地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽</li></ul><h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><ul><li style="list-style: none"><input type="checkbox" checked> 所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮</li><li style="list-style: none"><input type="checkbox" checked> 同一个连接里面发送多个请求不再需要按照顺序来</li><li style="list-style: none"><input type="checkbox" checked> 头信息压缩以及<strong>推送</strong>等提高效率的功能</li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><blockquote><p>客服端和服务端在进行http请求和返回的工程中，需要创建一个<code>TCP  connection</code>（由客户端发起）,http不存在连接这个概念，它只有请求和响应。请求和响应都是数据包，它们之间的传输通道就是<code>TCP connection</code>。</p></blockquote><p><img src="https://i.imgur.com/sPsrDR1.png" alt=""></p><p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><p>第一次握手：主机A发送位码为syn＝1，随机产生seq  number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p><p>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；</p><p>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功</p><h2 id="URI、URL、URN"><a href="#URI、URL、URN" class="headerlink" title="URI、URL、URN"></a>URI、URL、URN</h2><blockquote><p>URI: Uniform Resource Identifier/统一资源标识符<br>URL: Uniform Resource Locator/统一资源定位器<br>URN: Uniform Resource Name/永久统一资源定位符</p></blockquote><p>web上的各种资源（html、图片、视频、音频等）都由一个URI标识定位。URI相当于它们的详细“家庭住址”。</p><p>URI包含了URL和URN。</p><p><img src="http://ww4.sinaimg.cn/mw690/6941baebgw1evu0o8swewj20go0avq3e.jpg" alt=""></p><blockquote><p>URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。</p></blockquote><blockquote><p>URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下讨论资源。</p></blockquote><p>网上的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 这是一个URI</span><br><span class="line">http://bitpoetry.io/posts/hello.html#intro</span><br><span class="line"></span><br><span class="line">// 资源访问方式</span><br><span class="line">http://</span><br><span class="line"></span><br><span class="line">// 资源存储位置</span><br><span class="line">bitpoetry.io/posts/hello.html</span><br><span class="line"></span><br><span class="line">#intro // 资源</span><br><span class="line"></span><br><span class="line">// URL</span><br><span class="line">http://bitpoetry.io/posts/hello.html</span><br><span class="line"></span><br><span class="line">// URN</span><br><span class="line">bitpoetry.io/posts/hello.html#intro</span><br></pre></td></tr></table></figure><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p>请求报文：<br><img src="https://i.imgur.com/AVQ3UcM.jpg" alt=""></p><p>响应报文：<br><img src="https://i.imgur.com/o0vnSMW.jpg" alt=""></p><h2 id="HTTP-各种特性"><a href="#HTTP-各种特性" class="headerlink" title="HTTP 各种特性"></a>HTTP 各种特性</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><blockquote><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p></blockquote><p><a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">更详细的CURL，点这里。</a></p><p>curl 访问 <code>baidu.com</code>:<br><img src="https://i.imgur.com/NizwtqN.png" alt=""></p><p>返回的内容中，html部分只有一个meta标签，<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&gt;</code>，这是因为我们访问的是<code>baidu.com</code>，在浏览器中，浏览器会自动解析这个meta标签并重定向到<code>http://www.baidu.com/</code>，然而命令行中并没有解析的功能。</p><p>curl 访问 <code>www.baidu.com</code>:<br><img src="https://i.imgur.com/dAd9J4X.png" alt=""></p><h4 id="curl常用命令"><a href="#curl常用命令" class="headerlink" title="curl常用命令"></a>curl常用命令</h4><p><code>-v</code> 显示详细的请求信息</p><p><img src="https://i.imgur.com/okOHC3s.png" alt=""></p><p><code>-X</code> 指定请求方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET www.xxxx.com/xx/xx?xx=123</span><br><span class="line"></span><br><span class="line">curl -X POST www.xxxx.com/xx/xx?xx=123</span><br></pre></td></tr></table></figure><p><code>-o / -O</code> 保存下载的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 将文件下载到本地并命名为mygettext.html</span><br><span class="line">curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line"></span><br><span class="line">// 将文件保存到本地并命名为gettext.html</span><br><span class="line">curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><h3 id="CORS跨域请求的限制与解决"><a href="#CORS跨域请求的限制与解决" class="headerlink" title="CORS跨域请求的限制与解决"></a>CORS跨域请求的限制与解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server1.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  response.end(html)</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  response.end(<span class="string">'123'</span>)</span><br><span class="line">&#125;).listen(<span class="number">8887</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8887'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">'http://127.0.0.1:8887'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/9zkYqTV.png" alt=""></p><p>处理方法：<br>1.服务器端处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js 服务器端设置允许跨域</span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span> <span class="comment">// * 表示任何域名下都可以访问这个服务,也可以指定域名</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.jsonp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8887"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>就算存在跨域，请求还是会发送，响应也会返回，只是浏览器端发现了存在跨域问题就将返回内容屏蔽了，并报错提示。</p></blockquote><h3 id="CORS-预请求"><a href="#CORS-预请求" class="headerlink" title="CORS 预请求"></a>CORS 预请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">'http://127.0.0.1:8887'</span>,&#123;</span></span><br><span class="line"><span class="javascript">    method: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="undefined">    headers: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">'X-Test-Cors'</span>: <span class="string">'123'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/TdGoUJV.png" alt=""></p><p>我们设置的请求头中<code>X-Test-Cors</code>在跨域请求的时候，不被允许。</p><p>虽然不允许跨域，但是请求仍然会发送，并返回成功。<br><img src="https://i.imgur.com/deoApDA.png" alt=""></p><p>默认允许的请求方法：</p><ul><li>GET </li><li>HEAD</li><li>POST</li></ul><p>其他的方法(PUT、DELETE)都需要预请求验证的。</p><p>默认允许的<code>Content-Type</code>:</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>怎样设置允许我们设置的请求头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js </span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span> <span class="comment">// 加上这个设置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/gCaBgsm.png" alt=""></p><p>首先发送一个预请求，预请求就是告诉浏览器接下来要发送的post请求是被允许的。</p><p>设置允许的请求方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js </span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'POST, PUT, DELETE'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>设置一个安全时间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js </span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'POST, PUT, DELETE'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Max-Age'</span>: <span class="string">'1000'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>Access-Control-Max-Age</code>的单位是秒，意思就是在多少秒以内，我们设置的这些允许的请求头，请求方法，是不需要发送预请求验证的，直接就可以通过，并发送。</p><h3 id="缓存Cache-Control"><a href="#缓存Cache-Control" class="headerlink" title="缓存Cache-Control"></a>缓存Cache-Control</h3><p>常用值：<br><img src="https://i.imgur.com/mbdP7DC.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(html)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/script.js'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">      <span class="string">'Cache-Control'</span>: <span class="string">'max-age=20,public'</span> <span class="comment">// 缓存20s 多个值用逗号分开</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">'console.log("script loaded")'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/gDDrIrc.png" alt=""></p><p>刷新会发现<code>script.js</code>是从缓存中获取的，请求时间也是0。<br><img src="https://i.imgur.com/1ba21WT.png" alt=""></p><blockquote><p>我们希望浏览器缓存我们的图片，文件、js代码，但是服务器端代码更新了，浏览器端还是在缓存中获取的旧的文件。这就诞生了，webpack打包中出现的文件名后加上hash值，当文件改变时hash值也改变，这样浏览器就会发送新的请求到服务器端。</p></blockquote><h4 id="缓存验证"><a href="#缓存验证" class="headerlink" title="缓存验证"></a>缓存验证</h4><p><img src="https://i.imgur.com/4LpM5sO.png" alt=""></p><p>验证头：</p><ul><li>Last-Modified</li></ul><p>上次修改时间<br>配合If-Modified-Since或者If-Unmodified-Since使用<br>对比上次修改时间以验证资源是否需要更新</p><ul><li>Etag</li></ul><p>数据签名(内容修改，签名就会改变)<br>配合If-Match或者If-Non-Match使用<br>对比资源的签名判断是否使用缓存</p><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">302</span>, &#123;  <span class="comment">// or 301</span></span><br><span class="line">      <span class="string">'Location'</span>: <span class="string">'/new'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/new'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">'&lt;div&gt;this is content&lt;/div&gt;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/El7jbFA.png" alt=""></p><blockquote><p>302临时跳转，301永久跳转，301从缓存种获取跳转，使用301之后，主动权就掌握在用户手里，如果用户不清理缓存，那就算服务器端改变了也没用。</p></blockquote><p><img src="https://i.imgur.com/jmiFHTk.png" alt=""></p><h3 id="Content-Security-Policy-网页安全政策"><a href="#Content-Security-Policy-网页安全政策" class="headerlink" title="Content Security Policy (网页安全政策)"></a>Content Security Policy (网页安全政策)</h3><p><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener"> 阮一峰:Content Security Policy 入门教程</a></p>]]></content>
    
    <summary type="html">
    
      有关于网络协议、HTTP报文、跨域请求等http的基础知识的了解
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Vue 全家桶，深入Vue 的世界</title>
    <link href="http://yoursite.com/2018/06/28/vue-family/"/>
    <id>http://yoursite.com/2018/06/28/vue-family/</id>
    <published>2018-06-28T06:56:55.000Z</published>
    <updated>2018-06-28T06:59:22.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-实例上的属性"><a href="#Vue-实例上的属性" class="headerlink" title="Vue 实例上的属性"></a>Vue 实例上的属性</h2><p><img src="https://i.imgur.com/Y3Fn5lV.png" alt="Vue实例"></p><h3 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$parent</code>：用来访问组件实例的父实例</li><li style="list-style: none"><input type="checkbox" checked> <code>$root</code>: 用来访问当前组件树的根实例</li><li style="list-style: none"><input type="checkbox" checked> <code>$children</code>:用来访问当前组件实例的直接子组件实例</li><li style="list-style: none"><input type="checkbox" checked> <code>$refs</code>:用来访问ref指令的子组件</li></ul><h3 id="DOM访问"><a href="#DOM访问" class="headerlink" title="DOM访问"></a>DOM访问</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$el</code>：用来挂载当前组件实例的dom元素</li><li style="list-style: none"><input type="checkbox" checked> <code>$els</code>：用来访问$el元素中使用了v-el指令的DOM元素</li></ul><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$data</code>：用来访问组件实例观察的数据对象</li><li style="list-style: none"><input type="checkbox" checked> <code>$options</code>：用来访问组件实例化时的初始化选项对象</li></ul><h3 id="DOM方法的使用"><a href="#DOM方法的使用" class="headerlink" title="DOM方法的使用"></a>DOM方法的使用</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$appendTo(elementOrSelector, callback)</code>：将el所指的DOM元素插入目标元素</li><li style="list-style: none"><input type="checkbox" checked> <code>$before(elementOrSelector, callback)</code>：将el所指的DOM元素或片段插入目标元素之前</li><li style="list-style: none"><input type="checkbox" checked> <code>$after(elementOrSelector, callback)</code>：将el所指的DOM元素或片段插入目标元素之后</li><li style="list-style: none"><input type="checkbox" checked> <code>$remove(callback)</code>：将el所指的DOM元素或片段从DOM中删除</li><li style="list-style: none"><input type="checkbox" checked> <code>$nextTick(callback)</code>：用来在下一次DOM更新循环后执行指定的回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue 的 渲染过程是异步的</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;text&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      text: 0</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  mounted()&#123;</span></span><br><span class="line"><span class="regexp">    setInterval(()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">    &#125;,1000)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>可以看到text值的变化是0 5 10 15 … 而并没有出现 0 1 2 3 … 这样连续的变化<br><img src="https://i.imgur.com/R4QBBKU.gif" alt=""></p><h3 id="event方法的使用"><a href="#event方法的使用" class="headerlink" title="event方法的使用"></a>event方法的使用</h3><p>1.监听</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$on(event, callback)</code>：监听实例的自定义事件</li><li style="list-style: none"><input type="checkbox" checked> <code>$once(event, callback)</code>：同上，但只能触发一次</li><li style="list-style: none"><input type="checkbox" checked> <code>$watch(property,callback(new, old))</code>: 监听属性的变化，拿到变化前后的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  text(<span class="keyword">new</span>, old) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span>&#125;</span>：<span class="subst">$&#123;old&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">const</span> unWatch = <span class="keyword">this</span>.$watch(<span class="string">'text'</span>,(<span class="keyword">new</span>,old)=&gt;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span>&#125;</span>：<span class="subst">$&#123;old&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2秒后销毁 unWatch</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  unWatch();</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种写法的结果一样，只是第二种需要在组件销毁手动销毁$watch</span></span><br></pre></td></tr></table></figure><p>2.触发</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$dispatch(event,args)</code>：派发事件，先在当前实例触发，再沿父链一层层向上，对应的监听函数返回false停止</li><li style="list-style: none"><input type="checkbox" checked> <code>$broadcast(event,args)</code>：广播事件，遍历当前实例的$children，如果对应的监听函数返回false，就停止</li><li style="list-style: none"><input type="checkbox" checked> <code>$emit(event, args)</code>：触发事件</li></ul><p>3.删除</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$off(event, callback)</code>：删除时间监听</li></ul><p>4.其他</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$forceUpdate()</code>：强制组件刷新</li><li style="list-style: none"><input type="checkbox" checked> <code>$set(ele,attr,value)</code>：给对象设置属性</li><li style="list-style: none"><input type="checkbox" checked> <code>$delete(ele,attr,value)</code>：删除对象属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;obj.a&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      obj:&#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  mounted()&#123;</span></span><br><span class="line"><span class="regexp">    let i = 0;</span></span><br><span class="line"><span class="regexp">    setInterval(()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">      i++;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 第一种</span></span><br><span class="line"><span class="regexp">      this.obj.a = i ;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ obj.a没有定义，vue是无法监听到这个属性的变化，所以页面的值也不会变化，这时可以用$forceUpdate进行强制渲染，当然不推荐这种用法</span></span><br><span class="line"><span class="regexp">      this.$forceUpdate();</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 第二种</span></span><br><span class="line"><span class="regexp">      this.$set(this.obj,'a',i);</span></span><br><span class="line"><span class="regexp">    &#125;,1000)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h2><p>vue 官方生命周期<br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue生命周期"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'render error'</span>)</span><br><span class="line">  <span class="comment">// console.log('render function invoked') // render 在beforeMount 和 mounted之间执行</span></span><br><span class="line">  <span class="comment">// return h('div', &#123;&#125;, this.text) // 虚拟DOM</span></span><br><span class="line">&#125;,</span><br><span class="line">renderError (h, err) &#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, err.stack)</span><br><span class="line">&#125;,</span><br><span class="line">errorCaptured () &#123;</span><br><span class="line"><span class="comment">// 会向上冒泡，并且正式环境可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要修改data里面的值，最早只能放到create生命周期中</p></blockquote><h2 id="Vue-数据绑定"><a href="#Vue-数据绑定" class="headerlink" title="Vue 数据绑定"></a>Vue 数据绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;isActive?<span class="string">'active'</span>:<span class="string">'notActive'</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&#123;&#123;arr.join(' ')&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;<span class="built_in">Date</span>.now()&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-html="html"&gt;&lt;/</span>p&gt; </span><br><span class="line">    &lt;div</span><br><span class="line">      :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span></span><br><span class="line">      :style=<span class="string">"[styles, styles2]"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive? 'active':'']"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"(item,index) in arr"</span> :key=<span class="string">"index"</span>&gt;&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单个checkbox</span></span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"a"</span>&gt; &#123;&#123;a&#125;&#125; &lt;br/&gt;</span><br><span class="line">    <span class="comment">// 多个checkbox</span></span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"b"</span> value=<span class="string">"游泳"</span>&gt; 游泳</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"b"</span> value=<span class="string">"游泳"</span>&gt; 爬山</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"b"</span> value=<span class="string">"游泳"</span>&gt; 睡觉</span><br><span class="line">    </span><br><span class="line">    性别：&lt;input type=<span class="string">"radio"</span> v-model=<span class="string">"c"</span> value=<span class="string">"男"</span>&gt; 男</span><br><span class="line">    &lt;input type=<span class="string">"radio"</span> v-model=<span class="string">"c"</span> value=<span class="string">"女"</span>&gt; 女</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只绑定一次</span></span><br><span class="line">    &lt;p v-once=<span class="string">"a"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line">    </span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isActive: <span class="literal">false</span>,</span><br><span class="line">      arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      html: <span class="string">'&lt;span&gt;123&lt;/span&gt;'</span>,</span><br><span class="line">      styles: &#123;</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">        appearance: <span class="string">'none'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      styles2: &#123;</span><br><span class="line">        color: <span class="string">'black'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      a: <span class="literal">false</span>,</span><br><span class="line">      b:[], <span class="comment">// 可以拿到checkbox 的 value</span></span><br><span class="line">      c:<span class="string">''</span> <span class="comment">// 性别</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model-的修饰符"><a href="#v-model-的修饰符" class="headerlink" title="v-model 的修饰符"></a>v-model 的修饰符</h3><p>来自官网的例子：</p><p>1.<code>.number</code><br>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。</p><p>2.<code>.trim</code><br>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.<code>.lazy</code><br>在默认情况下，<code>v-model</code> 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 <code>lazy</code> 修饰符，从而转变为使用 change 事件进行同步(当输入框失去焦点)：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="数组和对象的注意事项"><a href="#数组和对象的注意事项" class="headerlink" title="数组和对象的注意事项"></a>数组和对象的注意事项</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ul><li>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span> <span class="comment">// 不是响应性的</span></span><br><span class="line">vm.items.length = <span class="number">2</span> <span class="comment">// 不是响应性的</span></span><br></pre></td></tr></table></figure><p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将触发状态更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure><p>你也可以使用 <code>vm.$set</code> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure></p><p>为了解决第二类问题，你可以使用 splice：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure></p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>Vue 不能检测对象属性的添加或删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// `vm.a` 现在是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 不是响应式的</span></span><br></pre></td></tr></table></figure><p>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 <code>Vue.set(object, key, value)</code> 方法向嵌套对象添加响应式属性。例如，对于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    userProfile: &#123;</span><br><span class="line">      name: <span class="string">'Anika'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>你可以添加一个新的 <code>age</code> 属性到嵌套的 <code>userProfile</code> 对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure></p><p>你还可以使用 <code>vm.$set</code> 实例方法，它只是全局 <code>Vue.set</code> 的别名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$set(vm.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure></p><p>有时你可能需要为已有对象赋予多个新属性，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(vm.userProfile, &#123;</span><br><span class="line">  age: <span class="number">27</span>,</span><br><span class="line">  favoriteColor: <span class="string">'Vue Green'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>你应该这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.userProfile = <span class="built_in">Object</span>.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class="line">  age: <span class="number">27</span>,</span><br><span class="line">  favoriteColor: <span class="string">'Vue Green'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h2><p>计算属性的使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      firstName: 'Fin',</span></span><br><span class="line"><span class="regexp">      lastName: 'Get',</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    name() &#123;</span></span><br><span class="line"><span class="regexp">      return `$&#123;this.firstName&#125;$&#123;this.lastName&#125;`</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>双向绑定的计算属性与Vuex<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex state是无法直接修改的，官方给出了 v-model 的解决方案</span></span><br><span class="line">&lt;input v-model=<span class="string">"message"</span>&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  message: &#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.obj.message</span><br><span class="line">    &#125;,</span><br><span class="line">    set (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'updateMessage'</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>如果在方法或者生命周期中使用了计算属性，则必须设置一个set</p></blockquote><h2 id="watch-监听器"><a href="#watch-监听器" class="headerlink" title="watch 监听器"></a>watch 监听器</h2><p>watch 简单使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123; fullName &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#demo',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    firstName: 'Foo',</span></span><br><span class="line"><span class="regexp">    lastName: 'Bar',</span></span><br><span class="line"><span class="regexp">    fullName: 'Foo Bar'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  watch: &#123; /</span><span class="regexp">/ watch 方法最初绑定的时候，它是不会执行的，只有变化了才会执行</span></span><br><span class="line"><span class="regexp">    firstName: function (val) &#123;</span></span><br><span class="line"><span class="regexp">      this.fullName = val + ' ' + this.lastName</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    lastName: function (val) &#123;</span></span><br><span class="line"><span class="regexp">      this.fullName = this.firstName + ' ' + val</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; </span><br><span class="line"><span class="comment">// 声明一个handler，这样在初始化时就会执行一次 handler</span></span><br><span class="line">  firstName: &#123;</span><br><span class="line">    handler(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听对象属性的变化"><a href="#监听对象属性的变化" class="headerlink" title="监听对象属性的变化"></a>监听对象属性的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123; obj.a &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;input v-model="obj.a" /</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      a: <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      handler() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'obj.a changed'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      immediate: <span class="literal">true</span>,</span><br><span class="line">      deep: <span class="literal">true</span> <span class="comment">// 如果不加这一句，在输入框中输入值，并不会打印 obj.a changed</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样写就能监听到属性值的变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'obj.a'</span>: &#123;</span><br><span class="line">    handler() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'obj.a changed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h2><h3 id="Vue-组件中的data为什么必须是函数"><a href="#Vue-组件中的data为什么必须是函数" class="headerlink" title="Vue 组件中的data为什么必须是函数"></a>Vue 组件中的data为什么必须是函数</h3><p><a href="https://cn.vuejs.org/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">官网解释</a></p><blockquote><p>在Vue组件中data必须是函数，但是在 <code>new Vue()</code>中data可以是一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyComponent'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;this is a component&lt;/div&gt;'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125; <span class="comment">// 返回一个唯一的对象，不要和其他组件共用一个对象进行返回</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面定义了一个<code>MyComponent</code>组件,在这里我们可以把这个组件看成一个构造函数。在其他页面引入，并注册组件时，实际上是对这个构造函数的一个引用。当在模板中正真使用组件时类似于实例化了一个组件对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一下</span></span><br><span class="line"><span class="keyword">let</span> MyComponent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line">MyComponent.prototype.data = &#123;</span><br><span class="line">  name: <span class="string">'component'</span>,</span><br><span class="line">  age: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化组件对象</span></span><br><span class="line"><span class="keyword">let</span> componentA = <span class="keyword">new</span> MyComponent();</span><br><span class="line"><span class="keyword">let</span> componentB = <span class="keyword">new</span> MyComponent();</span><br><span class="line"></span><br><span class="line">componentA.data.name === componentB.data.name; <span class="comment">// true</span></span><br><span class="line">componentA.data.age = <span class="number">4</span>;</span><br><span class="line">componentB.data.name;</span><br></pre></td></tr></table></figure><p>可以看出，两个实例组件对象的data是一模一样的，一个改变也会导致另一个改变，这在实际开发中是不符合组件式思想的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一下</span></span><br><span class="line"><span class="keyword">let</span> MyComponent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就行了 写成函数，函数有自己的作用域，不会相互影响</span></span><br><span class="line">MyComponent.prototype.data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">'component'</span>,</span><br><span class="line">    age: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用-Vue-use-定义全局组件"><a href="#用-Vue-use-定义全局组件" class="headerlink" title="用 Vue.use() 定义全局组件"></a>用 Vue.use() 定义全局组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 button 组件</span></span><br><span class="line"><span class="comment">// button.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;</span><br><span class="line">        按钮    </span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// button.js</span></span><br><span class="line"><span class="keyword">import</span> ButtonComponent <span class="keyword">from</span> <span class="string">'./button.vue'</span>;</span><br><span class="line"><span class="keyword">const</span> Button=&#123;</span><br><span class="line">  install:<span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    Vue.component(<span class="string">'Button'</span>,ButtonComponent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./component/button.js'</span>;</span><br><span class="line">Vue.use(Button);</span><br></pre></td></tr></table></figure><p>完成上面的步骤就可以在全局使用button组件了，其实最重要的<code>Vue.component(&#39;Button&#39;,ButtonComponent)</code>, <code>Vue.use(Button)</code>会执行install方法，也可以直接在<code>main.js</code>使用<code>Vue.component()</code>注册全局组件。</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;</span><br><span class="line">        按钮    </span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'msg'</span>], <span class="comment">// 没有任何限制</span></span><br><span class="line">  <span class="comment">// 输入限制</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 匹配任何类型)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组且一定会从一个工厂函数返回默认值</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件是不能直接修改props的。</p></blockquote><p><a href="https://finget.github.io/2018/06/08/vue-react-props/" target="_blank" rel="noopener">Vue组件之间的通信问题可以看这里…</a></p><h2 id="Vue-组件-extend"><a href="#Vue-组件-extend" class="headerlink" title="Vue 组件 extend"></a>Vue 组件 extend</h2><blockquote><p>使用<code>Vue.extend</code> 就是构造了一个Vue构造函数的“子类”。它的参数是一个<strong>包含组件选项的对象</strong>，其中<code>data</code>选项必须是函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个包含组件选项的对象</span></span><br><span class="line"><span class="keyword">const</span> compoent = &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    active: <span class="built_in">Boolean</span>,</span><br><span class="line">    propOne: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="text" v-model="text"&gt;</span></span><br><span class="line"><span class="string">      &lt;span v-show="active"&gt;see me if active&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123; <span class="comment">// 这个mounted先打印</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'comp mounted'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个“子类”</span></span><br><span class="line"><span class="keyword">const</span> CompVue = Vue.extend(compoent);</span><br><span class="line"><span class="comment">// 实例化一个“子类”</span></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  propsData: &#123; <span class="comment">// 这里如果用props，组件内是拿不到值的</span></span><br><span class="line">    propOne: <span class="string">'xxx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">'123'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'instance mounted'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component2 = &#123;</span><br><span class="line">  extends: component, <span class="comment">// 继承于 component</span></span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$parent.text = <span class="string">'111111111'</span>; <span class="comment">// 可以改变父组件的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'comp2 mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  name: <span class="string">'Root'</span>,</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent.$options.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Comp: componet2</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="number">23333</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;&#123;&#123;text&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;&lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue-组件高级属性"><a href="#Vue-组件高级属性" class="headerlink" title="Vue 组件高级属性"></a>Vue 组件高级属性</h2><h3 id="Vue-组件插槽"><a href="#Vue-组件插槽" class="headerlink" title="Vue 组件插槽"></a>Vue 组件插槽</h3><blockquote><p>通常我们会向一个组件中传入一些自定义的内容，这个时候就可以用到插槽。插槽内可以包含任何模板代码，包括HTML或者是一个组件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个带插槽的组件</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    Comp</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;这里的内容显示在插槽内&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><blockquote><p>官网链接:<a href="https://cn.vuejs.org/v2/guide/components-slots.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-slots.html</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页头放这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把主要内容放这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页脚放这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具名插槽的使用：</p><p>第一种：在一个父组件的 <code>&lt;template&gt;</code>元素上使用 <code>slot</code> 特性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种：直接在普通元素上使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插槽的默认内容"><a href="#插槽的默认内容" class="headerlink" title="插槽的默认内容"></a>插槽的默认内容</h4><blockquote><p>在插槽中可以设置一个默认内容，如果用户没有设置新的内容，则会显示默认内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><blockquote><p>2.1.0+ 新增 在 2.5.0+，<code>slot-scope</code> 不再限制在 <code>&lt;template&gt;</code> 元素上使用，而可以用在插槽内的任何元素或组件上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;slot value="456" name="finget"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    Comp</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;</span></span><br><span class="line"><span class="string">        &lt;p slot-scope="props"&gt;&#123;&#123;props.value&#125;&#125; &#123;&#123;props.name&#125;&#125;&lt;/p&gt; // 456 finget</span></span><br><span class="line"><span class="string">      &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-inject-跨级组件交互"><a href="#provide-inject-跨级组件交互" class="headerlink" title="provide/inject 跨级组件交互"></a>provide/inject 跨级组件交互</h3><blockquote><p>2.2.0 新增</p></blockquote><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是注入一个父级组件内部的值，provide需要作为一个函数，类似于data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  inject: [<span class="string">"value"</span>]</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;子组件 &#123;&#123;value&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  components:&#123;</span><br><span class="line">    Comp</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123; <span class="comment">// 这里如果只是一个对象的话是无法拿到this.value的</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="keyword">this</span>.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;&lt;/comp&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="text" v-model="value"&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要监听父级组件的属性值的变化，从而自动更新子组件的值，需要手动实现监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  inject: [<span class="string">"data"</span>]</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;子组件 &#123;&#123;data.value&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">provide() &#123; </span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">  <span class="comment">// 这是vue双向绑定的基础</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data,<span class="string">"value"</span>,&#123;</span><br><span class="line">    get: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.value,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Vue-的render"><a href="#Vue-的render" class="headerlink" title="Vue 的render"></a>Vue 的render</h2><p>Vue模板的解析：<a href="https://finget.github.io/2018/05/31/mvvm-vue/" target="_blank" rel="noopener">https://finget.github.io/2018/05/31/mvvm-vue/</a></p><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="router构建选项"><a href="#router构建选项" class="headerlink" title="router构建选项"></a>router构建选项</h3><h4 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  redirect: <span class="string">'/app'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="History-模式："><a href="#History-模式：" class="headerlink" title="History 模式："></a>History 模式：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>vue-router</code> 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p><p>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id" target="_blank" rel="noopener">http://oursite.com/user/id</a> 就会返回 404，这就不好看了。</p><p>给个警告页：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">component</span>: NotFoundComponent &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="base"><a href="#base" class="headerlink" title="base"></a>base</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: <span class="string">'/base/'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/hello'</span>, <span class="attr">component</span>: hello &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当访问<code>localhost:8080/hello</code>会变成<code>localhost:8080/base/hello</code>,所有的路由路径都会加上<code>/base</code>,当然手动删除<code>/base</code>还是可以打开页面</p><h4 id="linkActiveClass-和-linkExactActiveClass"><a href="#linkActiveClass-和-linkExactActiveClass" class="headerlink" title="linkActiveClass 和 linkExactActiveClass"></a>linkActiveClass 和 linkExactActiveClass</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/app"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>router-link</code>在页面中会渲染成<code>a</code>标签，点击之后会添加两个类名:<code>router-link-exact-active</code> 和 <code>router-link-active</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  linkActiveClass: <span class="string">'active-link'</span>,</span><br><span class="line">  linkExactActiveClass: <span class="string">'exact-active-link'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这相当于是重新命名了两个类名。</p><p>两者的不同点：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login/exact"</span>&gt;</span>login exact<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面这两个路由有一部分<code>/login</code>是相同的，在点击了<code>login exact</code>路由调转到<code>/login/exact</code>后：</p><p><code>/login</code> 上还保留了<code>router-link-active</code>类名<br><img src="https://i.imgur.com/GMEcJ19.png" alt=""></p><h4 id="scrollBehavior"><a href="#scrollBehavior" class="headerlink" title="scrollBehavior"></a>scrollBehavior</h4><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。</p><blockquote><p>注意: 这个功能只在支持 history.pushState 的浏览器中可用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  scrollBehavior(to, form, savedPosition)&#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>scrollBehavior</code> 方法接收 <code>to</code> 和 <code>from</code> 路由对象。第三个参数 <code>savedPosition</code> 当且仅当 <code>popstate</code> 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。</p><h4 id="parseQuery-和-stringifyQuery"><a href="#parseQuery-和-stringifyQuery" class="headerlink" title="parseQuery 和 stringifyQuery"></a>parseQuery 和 stringifyQuery</h4><blockquote><p>提供自定义查询字符串的解析/反解析函数。覆盖默认行为。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  parseQuery (query) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(query)</span><br><span class="line">  &#125;,</span><br><span class="line">  stringifyQuery (obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fallback"><a href="#fallback" class="headerlink" title="fallback"></a>fallback</h4><p>当浏览器不支持 <code>history.pushState</code> 控制路由是否应该回退到 <code>hash</code> 模式。默认值为 true。</p><p>在 IE9 中，设置为 false 会使得每个 <code>router-link</code> 导航都触发整页刷新。它可用于工作在 IE9 下的服务端渲染应用，因为一个 hash 模式的 URL 并不支持服务端渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  fallback: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h3><p><a href="https://router.vuejs.org/zh/guide/advanced/meta.html" target="_blank" rel="noopener">官网例子：</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'bar'</span>,</span><br><span class="line">          component: Bar,</span><br><span class="line">          <span class="comment">// a meta field</span></span><br><span class="line">          meta: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么如何访问这个 <code>meta</code> 字段呢？</p><p>首先，我们称呼 <code>routes</code> 配置中的每个路由对象为 路由记录。路由记录可以是嵌套的，因此，当一个路由匹配成功后，他可能匹配多个路由记录</p><p>例如，根据上面的路由配置，<code>/foo/bar</code> 这个 <code>URL</code> 将会匹配父路由记录以及子路由记录。</p><p>一个路由匹配到的所有路由记录会暴露为 <code>$route</code> 对象 (还有在导航守卫中的路由对象) 的 <code>$route.matched</code> 数组。因此，我们需要遍历 <code>$route.matched</code> 来检查路由记录中的 <code>meta</code> 字段。</p><p>下面例子展示在全局导航守卫中检查元字段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">record</span> =&gt;</span> record.meta.requiresAuth)) &#123;</span><br><span class="line">    <span class="comment">// this route requires auth, check if logged in</span></span><br><span class="line">    <span class="comment">// if not, redirect to login page.</span></span><br><span class="line">    <span class="keyword">if</span> (!auth.loggedIn()) &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        query: &#123; <span class="attr">redirect</span>: to.fullPath &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next() <span class="comment">// 确保一定要调用 next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><blockquote><p>在一个路由下展示多个视图组件,用的并不多</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这个页面中要分别展示三个视图</span></span><br><span class="line">&lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span> // 默认的</span></span><br><span class="line">&lt;router-view name="a"&gt;&lt;/router-view&gt; // 视图a</span><br><span class="line">&lt;router-view name="b"&gt;&lt;/router-view&gt; // 视图b</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      components: &#123; <span class="comment">// 加s</span></span><br><span class="line">        <span class="keyword">default</span>: Foo, <span class="comment">// 对应默认router-view</span></span><br><span class="line">        a: Bar, <span class="comment">// name = "a"</span></span><br><span class="line">        b: Baz <span class="comment">// name = "b"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><blockquote><p>路由改变时，按顺序触发的钩子函数</p></blockquote><h4 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before each invoked'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeResolve(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before resolve invoked'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每个守卫方法接收三个参数：</p><ul><li><p><code>to: Route</code>: 即将要进入的目标 <strong>路由对象</strong></p></li><li><p><code>from: Route</code>: 当前导航正要离开的 <strong>路由对象</strong></p></li><li><p><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。</p><ul><li><p><code>next()</code>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <code>confirmed</code> (确认的)。</p></li><li><p><code>next(false)</code>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址。</p></li><li><p><code>next(&#39;/&#39;)</code> 或者 <code>next({ path: &#39;/&#39; })</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 <code>next</code> 传递任意位置对象，且允许设置诸如 <code>replace: true、name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项。</p></li><li><p><code>next(error)</code>: (2.4.0+) 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调。</p></li></ul></li></ul><p><strong>确保要调用 <code>next</code> 方法，否则钩子就不会被 <code>resolved</code>。</strong>    </p><h5 id="路由对象"><a href="#路由对象" class="headerlink" title="路由对象"></a>路由对象</h5><blockquote><p>一个路由对象 (route object) 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的路由记录 (route records)。</p></blockquote><p>路由对象是不可变 (immutable) 的，每次成功的导航后都会产生一个新的对象。</p><p>路由对象属性：</p><ul><li><p>$route.path</p><ul><li>类型: string<br>  字符串，对应当前路由的路径，总是解析为绝对路径，如 “/foo/bar”。</li></ul></li><li><p>$route.params</p><ul><li>类型: Object<br>  一个 key/value对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。</li></ul></li><li><p>$route.query</p><ul><li>类型: Object<br>  一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象。</li></ul></li><li><p>$route.hash</p><ul><li>类型: string<br>  当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。</li></ul></li><li><p>$route.fullPath</p><ul><li>类型: string<br>  完成解析后的 URL，包含查询参数和 hash 的完整路径。</li></ul></li><li><p>$route.matched</p><ul><li>类型: Array<routerecord><br>  一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 routes 配置数组中的对象副本 (还有在 children 数组)。</routerecord></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 下面的对象就是路由记录</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 这也是个路由记录</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 URL 为 /foo/bar，<code>$route.matched</code> 将会是一个包含从上到下的所有对象 (副本)。</p><ul><li><p>$route.name<br>  当前路由的名称，如果有的话。(查看命名路由)</p></li><li><p>$route.redirectedFrom<br>  如果存在重定向，即为重定向来源的路由的名字</p></li></ul><h4 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after each invoked'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 <code>DOM</code> 更新。</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li></ol><h3 id="异步路由"><a href="#异步路由" class="headerlink" title="异步路由"></a>异步路由</h3><p>在路由文件中，直接import所有组件势必造成页面首次渲染时间变长，异步路由，当进入对应的路由才加载对应的页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../view/...'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这种写法需要安装<code>syntax-dynamic-import</code>,并在<code>.babelrc</code>进行配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;syntax-dynamic-import&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vux"><a href="#Vux" class="headerlink" title="Vux"></a>Vux</h2><blockquote><p>以下内容来自<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官网：https://vuex.vuejs.org/zh/</a></p></blockquote><h3 id="简单使用vuex"><a href="#简单使用vuex" class="headerlink" title="简单使用vuex"></a>简单使用vuex</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updateCount(state, num) &#123;</span><br><span class="line">      state.count = num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store.js'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store, <span class="comment">// 挂载</span></span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line">mounted()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'updateCount'</span>, i++)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Apue7Qc.png" alt=""></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><blockquote><p>Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p></blockquote><p>大白话： state就相当于是个全局对象，通过<code>Vue.use(Vuex)</code>全局注册了vuex之后，在任意组件中可以用<code>this.$store.state</code>拿到该对象</p><p>Vuex的状态存储是响应式的，从store实例中读取状态最简单的方法就是在计算属性中返回某个状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>state</code>中的<code>count</code>变化时，自动会更新<code>computed</code>，从而改变相关<code>DOM</code></p><h5 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h5><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用<code>mapState</code>辅助函数帮助我们生成计算属性，让你少按几次键：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class="line">    countAlias: <span class="string">'count'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数 不能用箭头函数</span></span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">'count'</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用操作</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([<span class="string">'count'</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 换一个变量名</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    count1 : <span class="string">'count'</span>,</span><br><span class="line">    count2 : <span class="function"><span class="params">state</span> =&gt;</span> state.count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><blockquote><p>Getter就是vuex种state的computed，通过state派生出新的state，而且它会被缓存起来，只有依赖的state发生变化才会重新计算</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  fullName(state) &#123; <span class="comment">// 默认接收state作为第一个参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;state.firstName&#125;</span><span class="subst">$&#123;state.lastName&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h5><p>getter的使用和state类似，可以把它看成state来用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想给getter换个名字，方法和state一样，不重复</p><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><blockquote><p>Mutation必须是同步的</p></blockquote><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><h5 id="提交载荷-传参"><a href="#提交载荷-传参" class="headerlink" title="提交载荷(传参)"></a>提交载荷(传参)</h5><p>你可以向 <code>store.commit</code> 传入额外的参数，即 <code>mutation</code> 的 载荷（payload）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个<strong>对象</strong>，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h5><p>提交 <code>mutation</code> 的另一种方式是直接使用包含 <code>type</code> 属性的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">'increment'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用常量替代-Mutation-事件类型"><a href="#使用常量替代-Mutation-事件类型" class="headerlink" title="使用常量替代 Mutation 事件类型"></a>使用常量替代 Mutation 事件类型</h5><p>使用常量替代<code>mutation</code> 事件类型在各种 <code>Flux</code> 实现中是很常见的模式。这样可以使 <code>linter</code> 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 <code>app</code> 包含的 <code>mutation</code> 一目了然：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="在组件中提交-Mutation"><a href="#在组件中提交-Mutation" class="headerlink" title="在组件中提交 Mutation"></a>在组件中提交 Mutation</h5><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 <code>mutation</code>，或者使用 <code>mapMutations</code> 辅助函数将组件中的 <code>methods</code> 映射为 <code>store.commit</code> 调用（需要在根节点注入 store）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><blockquote><p>Action 可以包含异步操作</p></blockquote><p>Action跟Mutation类似，Action是调用<code>commit</code>方法，提交<code>mutation</code>的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code>，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code>。</p><p>实践中，我们会经常用到 ES2015 的 参数解构 来简化代码（特别是我们需要调用 commit 很多次的时候）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line"><span class="comment">// &#123;commit&#125; = context 解构出来</span></span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际代码：<br><img src="https://i.imgur.com/haIqnu6.png" alt=""></p><h5 id="在组件中分发-Action"><a href="#在组件中分发-Action" class="headerlink" title="在组件中分发 Action"></a>在组件中分发 Action</h5><p>你在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 <code>action</code>，或者使用 <code>mapActions</code> 辅助函数将组件的 <code>methods</code> 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 store）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>开启严格模式，仅需在创建 store 的时候传入 strict: true：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  strict: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</p><h4 id="开发环境与发布环境"><a href="#开发环境与发布环境" class="headerlink" title="开发环境与发布环境"></a>开发环境与发布环境</h4><p><strong>不要在发布环境下启用严格模式！</strong>严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</p><p>类似于插件，我们可以让构建工具来处理这种情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  strict: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Vue Vue-router Vuex
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 与 React 父子组件之间的家长里短</title>
    <link href="http://yoursite.com/2018/06/08/vue-react-props/"/>
    <id>http://yoursite.com/2018/06/08/vue-react-props/</id>
    <published>2018-06-08T08:43:50.000Z</published>
    <updated>2018-06-08T08:46:24.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// father.js</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"father"</span>&gt;</span><br><span class="line">      这是父组件：</span><br><span class="line">      &lt;p&gt;父组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child ref="child" :msg="msg" @click="faClick"&gt;&lt;/</span>Child&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'父组件传给子组件'</span> <span class="comment">// 传递给子组件的值</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    faClick(msg) &#123; <span class="comment">// msg 子组件传递给父组件的值</span></span><br><span class="line">      alert(msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    childSayHello() &#123; <span class="comment">// 父组件调用子组件的方法</span></span><br><span class="line">      <span class="keyword">this</span>.$refs,child.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.js</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"child"</span>&gt;</span><br><span class="line">      这是子组件：&lt;p&gt;父组件传递的值：&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="click"&gt;接收父组件方法&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'msg'</span>],</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childMsg : <span class="string">'哈哈哈'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    click() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'click'</span>,<span class="keyword">this</span>.childMsg); <span class="comment">// 第一个参数为派发的事件名， 第二个参数为传递的值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">      alert(<span class="string">'I am child!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父组件向子组件传值："><a href="#父组件向子组件传值：" class="headerlink" title="父组件向子组件传值："></a>父组件向子组件传值：</h3><ol><li>在父组件中引入并注册子组件</li><li>在子组件中定义 <code>props:[&#39;msg&#39;]</code> (不能省略引号)</li><li>通过 <code>:msg=&quot;msg&quot;</code> 的方法传递变量，也可以通过 <code>msg=&quot;msg&quot;</code> 传递字符串</li></ol><h3 id="父组件调用子组件的方法："><a href="#父组件调用子组件的方法：" class="headerlink" title="父组件调用子组件的方法："></a>父组件调用子组件的方法：</h3><ol><li>在父组件中给子组件绑定一个 <code>ref=&quot;xxx&quot;</code> 属性</li><li>通过 <code>this.$refs.xxx.方法</code> 调用</li></ol><h3 id="子组件向父组件传值："><a href="#子组件向父组件传值：" class="headerlink" title="子组件向父组件传值："></a>子组件向父组件传值：</h3><ol><li>在子组件中定义一个方法</li><li>通过 <code>this.$emit(&#39;事件名&#39;,&#39;参数&#39;)</code> 派发一个事件，并传递参数</li><li>父组件中通过 <code>@事件名</code> 的方式监听事件</li><li>父组件中定一个一个方法，该方法的参数对应子组件传递过来的参数</li></ol><h3 id="子组件调用父组件的方法："><a href="#子组件调用父组件的方法：" class="headerlink" title="子组件调用父组件的方法："></a>子组件调用父组件的方法：</h3><p>子组件可以通过<code>this.$parent.xxx</code> 直接调用父组件的方法。</p><blockquote><p>通过子组件派发的事件，不仅可以向父组件传递参数，父组件也可以通过传递的参数，改变向子组件传递的值，从而改变子组件。</p></blockquote><p>props 还可以进行一系列的格式校验，更多内容<a href="https://cn.vuejs.org/v2/guide/components-props.html#ad" target="_blank" rel="noopener">查看官网</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 匹配任何类型)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组且一定会从一个工厂函数返回默认值</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// father.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      con: <span class="string">'父组件给子组件'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传递给子组件的方法，并接收子组件实例，绑定在this.child上</span></span><br><span class="line">  onRef = <span class="function">(<span class="params">ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.child = ref</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过this.child 就可以直接调用子组件的内部方法</span></span><br><span class="line">  click = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.child.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传递个子组件的方法</span></span><br><span class="line">  faClick = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    alert(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是父组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.click&#125;&gt;调用子组件方法&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          这是子组件</span><br><span class="line">          &lt;Child onRef=&#123;<span class="keyword">this</span>.onRef&#125; connect=&#123;<span class="keyword">this</span>.state.con&#125; click=&#123;(msg) =&gt; <span class="keyword">this</span>.faClick(msg)&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Father;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用父组件传递的方法，并传递子组件实例</span></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onRef(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用父组件传递的方法</span></span><br><span class="line">  click= <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.click(<span class="string">'哈啊哈'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子组件内部方法</span></span><br><span class="line">  sayHello = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'I am child'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         &lt;p&gt;&#123;<span class="keyword">this</span>.props.connect&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">         &lt;button onClick=&#123;this.click&#125;&gt;接收父组件的方法&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Child;</span></span><br></pre></td></tr></table></figure><h3 id="父组件向子组件传值：-1"><a href="#父组件向子组件传值：-1" class="headerlink" title="父组件向子组件传值："></a>父组件向子组件传值：</h3><ol><li>在父组件中引入子组件</li><li>通过 <code>connect={this.state.con}</code> 方式可以传递值</li><li>子组件通过 <code>this.props.connect</code> 接收</li></ol><h3 id="父组件调用子组件的方法：-1"><a href="#父组件调用子组件的方法：-1" class="headerlink" title="父组件调用子组件的方法："></a>父组件调用子组件的方法：</h3><ol><li>给子组件传递一个方法 <code>onRef={this.onRef}</code></li><li>子组件在 <code>componentDidMount</code> 生命周期里 调用这个方法，并回传自身实例</li><li>父组在该方法中接收子组件实例，并挂载在父组件实例属性上，例：<code>this.child = ref</code></li><li>最后就可以通过 <code>this.child.xxx</code> 直接调用子组件方法</li></ol><h3 id="子组件向父组件传参："><a href="#子组件向父组件传参：" class="headerlink" title="子组件向父组件传参："></a>子组件向父组件传参：</h3><ol><li>在父组件中给子组件传递一个方法，<code>click={(msg) =&gt; this.faClick(msg)}</code></li><li>在子组件中通过一个事件接收这个方法，<code>onClick={this.click}</code></li><li>通过<code>click= ()=&gt; {this.props.click(&#39;哈啊哈&#39;);}</code> 从而传递参数</li></ol><h3 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h3><ol><li>父组件可以直接传递一个方法给子组件</li><li>子组件可以通过 <code>this.props.xxx</code> 调用</li></ol><blockquote><p>不能直接通过 <code>&lt;button onClick={this.props.click(&#39;哈啊哈&#39;)}&gt;接收父组件的方法&lt;/button&gt;</code> 进行传参，这样在组件初始化时，事件就执行了。</p></blockquote><h2 id="Vue-与-React-的不同："><a href="#Vue-与-React-的不同：" class="headerlink" title="Vue 与 React 的不同："></a>Vue 与 React 的不同：</h2><ol><li>React 的子组件中不用定义父组件传值对应的变量</li><li>React 的子组件不用派发事件，父组件可以直接传递方法</li><li>子组件通过<code>this.props.click</code> 可以调用父组件传递的方法，并传参</li></ol>]]></content>
    
    <summary type="html">
    
      记录一下，vue与react父子组件之间的通信问题
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————MVVM-Vue</title>
    <link href="http://yoursite.com/2018/05/31/mvvm-vue/"/>
    <id>http://yoursite.com/2018/05/31/mvvm-vue/</id>
    <published>2018-05-31T07:38:33.000Z</published>
    <updated>2018-05-31T07:41:41.364Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li>如何理解 MVVM</li><li>如何实现 MVVM</li><li>是否解读过 Vue 的源码</li></ul><h3 id="Jquery-与-框架的区别"><a href="#Jquery-与-框架的区别" class="headerlink" title="Jquery 与 框架的区别"></a>Jquery 与 框架的区别</h3><h4 id="jquery-实现-todo-list"><a href="#jquery-实现-todo-list" class="headerlink" title="jquery 实现 todo-list"></a>jquery 实现 todo-list</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $txtTitle = $(<span class="string">'#txt-title'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $btnSubmit = $(<span class="string">'#btn-submit'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $ulList = $(<span class="string">'#ul-list'</span>);</span></span><br><span class="line"><span class="javascript">    $btnSubmit.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> title = $txtTitle.val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!title) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $li = $(<span class="string">'&lt;li&gt;'</span> + title + <span class="string">'&lt;/li&gt;'</span>);</span></span><br><span class="line"><span class="undefined">        $ulList.append($li);</span></span><br><span class="line"><span class="javascript">        $txtTitle.val(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="vue-实现-todo-list"><a href="#vue-实现-todo-list" class="headerlink" title="vue 实现 todo-list"></a>vue 实现 todo-list</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// data 独立</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">      title: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      list: []</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 初始化 Vue 实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: data,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="javascript">          add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.title = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h4><ul><li><p>数据和视图的分离，解耦（开放封闭原则，对扩展开放，对修改封闭）</p><p>在jQuery中在jQuery代码中操作视图和数据，混在一块了</p></li><li><p>以数据驱动视图，只关心数据变化，DOM操作被封装</p><p>只改数据，视图自动更新</p></li></ul><h3 id="MVVM的理解"><a href="#MVVM的理解" class="headerlink" title="MVVM的理解"></a>MVVM的理解</h3><ul><li><p>MVC （Model View Controller）</p><p><img src="https://i.imgur.com/VBt5082.png" alt=""></p><p><img src="https://i.imgur.com/I8pCHF8.png" alt=""></p></li><li><p>MVVM （Model View ViewModel）</p></li></ul><p><img src="https://i.imgur.com/nbERAJ8.png" alt=""> </p><blockquote><p>View 通过 <code>事件绑定</code> (DOM Listeners) 操作Model; Model通过 <code>数据绑定</code> (Data Bindings)操作View。</p></blockquote><h2 id="Vue-三要素"><a href="#Vue-三要素" class="headerlink" title="Vue 三要素"></a>Vue 三要素</h2><ul><li>响应式： Vue 如何监听到 data 的每个属性变化？</li><li>模板引擎： Vue 的模板如何被解析，指令如何处理？</li><li>渲染：Vue 的模板如何被渲染成Html？</li></ul><h3 id="Vue中如何实现响应式"><a href="#Vue中如何实现响应式" class="headerlink" title="Vue中如何实现响应式"></a>Vue中如何实现响应式</h3><h4 id="什么是响应式"><a href="#什么是响应式" class="headerlink" title="什么是响应式"></a>什么是响应式</h4><ul><li>修改 data 属性之后， Vue 立刻监听到</li><li>data 属性被代理到 vm上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// vm.name = 'zhangsan'</span></span><br><span class="line"><span class="comment">// vm.age = '20'</span></span><br></pre></td></tr></table></figure><h4 id="Object-defineProperty，Vue核心函数"><a href="#Object-defineProperty，Vue核心函数" class="headerlink" title="Object.defineProperty，Vue核心函数"></a>Object.defineProperty，Vue核心函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 获取属性的时候，如何监听</span></span><br><span class="line">obj.age = <span class="number">26</span>; <span class="comment">// 赋值属性的时候，如何监听</span></span><br></pre></td></tr></table></figure><p>上面是无法监听对象的属性的访问以及赋值操作的，直接就产生了操作的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> _name = <span class="string">'shangsan'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>, _name) <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">return</span> _name</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal)  <span class="comment">// 监听</span></span><br><span class="line">    _name = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 可以监听到</span></span><br><span class="line">obj.name = <span class="string">'lisi'</span>; <span class="comment">// 可以监听到</span></span><br></pre></td></tr></table></figure><h3 id="Vue-中何如解析模板"><a href="#Vue-中何如解析模板" class="headerlink" title="Vue 中何如解析模板"></a>Vue 中何如解析模板</h3><h4 id="模板是什么"><a href="#模板是什么" class="headerlink" title="模板是什么"></a>模板是什么</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>本质： 字符串</li><li>有逻辑， 如<code>v-if</code> <code>v-for</code> 等</li><li>与 html 标签格式很像，但有很大区别（html是静态的，模板是动态的）</li><li>最终还要转换为 html 来显示<ul><li>模板最终必须转换成 JS 代码</li><li>有逻辑（<code>v-if</code> <code>v-for</code> 等），必须用JS才能实现（图灵完备）</li><li>因此，模板最重要转成一个JS函数（render函数）</li></ul></li></ul><h4 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h4><h5 id="with-–-实际开发不推荐用"><a href="#with-–-实际开发不推荐用" class="headerlink" title="with – 实际开发不推荐用"></a>with – 实际开发不推荐用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  getAddress: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'beijing'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不使用with</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(obj.name)</span><br><span class="line">  alert(obj.age)</span><br><span class="line">  obj.getAddress()</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用with</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(obj) &#123;</span><br><span class="line">    alert(age)</span><br><span class="line">    alert(name)</span><br><span class="line">    getAddress()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">  price: 100</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板将变成下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="keyword">this</span>) &#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line"><span class="keyword">return</span> _c(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    attrs: &#123;<span class="string">'id'</span>: <span class="string">'app'</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [</span><br><span class="line">    _c(<span class="string">'p'</span>, [_v(_s(price))])</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/anzI5vL.png" alt=""></p><h5 id="看todo-list的render"><a href="#看todo-list的render" class="headerlink" title="看todo-list的render"></a>看todo-list的render</h5><p>在vue源码里<code>alert</code>  <code>render</code> 函数</p><p><img src="https://i.imgur.com/uBpSBab.png" alt=""> </p><p>以上面vue实现的todolist为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c( <span class="comment">// _c创建一个标签</span></span><br><span class="line">        <span class="string">'div'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            attrs:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [</span><br><span class="line">            _c(</span><br><span class="line">                <span class="string">'div'</span>,</span><br><span class="line">                [</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'input'</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                            directives:[</span><br><span class="line">                                &#123;</span><br><span class="line">                                    name:<span class="string">"model"</span>,</span><br><span class="line">                                    rawName:<span class="string">"v-model"</span>,</span><br><span class="line">                                    value:(title),</span><br><span class="line">                                    expression:<span class="string">"title"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            domProps:&#123;</span><br><span class="line">                                <span class="string">"value"</span>:(title)</span><br><span class="line">                            &#125;,</span><br><span class="line">                            on:&#123;</span><br><span class="line">                                <span class="string">"input"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>($event.target.composing)<span class="keyword">return</span>;</span><br><span class="line">                                    title=$event.target.value</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ),</span><br><span class="line">                    _v(<span class="string">" "</span>),</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'button'</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                            on:&#123;</span><br><span class="line">                                <span class="string">"click"</span>:add</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        [_v(<span class="string">"submit"</span>)]</span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            ),</span><br><span class="line">            _v(<span class="string">" "</span>),</span><br><span class="line">            _c(<span class="string">'div'</span>,</span><br><span class="line">               [</span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'ul'</span>,</span><br><span class="line">                    _l((list),<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'li'</span>,[_v(_s(item))])&#125;) <span class="comment">// _l 解析 v-for 循环</span></span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="render-与-Vdom"><a href="#render-与-Vdom" class="headerlink" title="render 与 Vdom"></a>render 与 Vdom</h5><p><a href="https://finget.github.io/2018/05/22/virtualDom/" target="_blank" rel="noopener">可以先看一下virtualDom</a></p><p><img src="https://i.imgur.com/8ZlZdZn.png" alt=""> </p><ul><li>vm._c 其实相当于 snabbdom 中的 h 函数</li><li>render 函数执行之后，返回的是 vnode</li></ul><p><img src="https://i.imgur.com/2C0Lz42.png" alt=""> </p><ul><li>updateComponent 中实现了 vdom 的 patch</li><li>页面首次渲染 执行updateComponent</li><li>data 中每次修改属性， 执行 updateComponent</li></ul><h5 id="vue-的整个实现流程"><a href="#vue-的整个实现流程" class="headerlink" title="vue 的整个实现流程"></a>vue 的整个实现流程</h5><ul><li>第一步： 解析模板成render函数<ul><li>with 的用法</li><li>模板中的所有信息都被render函数包含</li><li>模板中用到的data中的属性，都变成了js变量</li><li>模板中的v-model v-if v-on 都变成了 js逻辑</li><li>render 函数返回 vnode</li></ul></li></ul><p><img src="https://i.imgur.com/vXDR2CX.png" alt=""><br><img src="https://i.imgur.com/IM7NA6B.png" alt=""></p><ul><li>第二部： 响应式开始监听<ul><li>Object.defineProperty</li><li>将 data 的属性代理到 vm 上</li></ul></li></ul><p><img src="https://i.imgur.com/gA2rWmu.png" alt=""></p><ul><li>第三步： 首次渲染，显示页面，且绑定依赖</li></ul><p><img src="https://i.imgur.com/1b0LjjK.png" alt=""></p><ul><li>第四步： data 属性变化，触发 rerender</li></ul>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JSX到原生DOM是怎么炼成的</title>
    <link href="http://yoursite.com/2018/05/24/react-render/"/>
    <id>http://yoursite.com/2018/05/24/react-render/</id>
    <published>2018-05-24T09:28:24.000Z</published>
    <updated>2018-05-24T09:30:04.593Z</updated>
    
    <content type="html"><![CDATA[<p>一段很平常的JSX代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ele = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span> <span class="attr">className</span>=<span class="string">"red"</span>&gt;</span>hello</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"blue"</span>&gt;</span>word<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(ele,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="JSX语法糖"><a href="#JSX语法糖" class="headerlink" title="JSX语法糖"></a>JSX语法糖</h2><p>上面的写法是为了写起来方便也就是所谓的语法糖，我们借用babel的在线工具可以清楚的看到原生的react应该怎么写：<br><img src="https://i.imgur.com/dWU0WAr.png" alt=""></p><h2 id="React-createElement-真面目"><a href="#React-createElement-真面目" class="headerlink" title="React.createElement()真面目"></a>React.createElement()真面目</h2><p>那么React.createElement()，创建的react元素又是长什么样的？<br>我们可以打印ele看一看：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ele);</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/MmWpLXK.png" alt=""></p><p>简化一下它的结构<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eleObj = &#123;</span><br><span class="line">  type: <span class="string">'div'</span>, <span class="comment">// 就是什么标签嘛</span></span><br><span class="line">  props:&#123; <span class="comment">// 属性 包括子节点</span></span><br><span class="line">    className: <span class="string">'red'</span>, <span class="comment">// class</span></span><br><span class="line">    id: <span class="string">'div'</span>,  <span class="comment">// id</span></span><br><span class="line">    children:[  <span class="comment">// 子节点</span></span><br><span class="line">      <span class="string">'hello'</span>,  <span class="comment">// 文本子节点</span></span><br><span class="line">      &#123;         <span class="comment">// 子节点对象</span></span><br><span class="line">        type:<span class="string">'span'</span>,</span><br><span class="line">        props:&#123;</span><br><span class="line">          className:<span class="string">'blue'</span>,</span><br><span class="line">          children:[<span class="string">'word'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模拟render-函数实现"><a href="#模拟render-函数实现" class="headerlink" title="模拟render()函数实现"></a>模拟render()函数实现</h2><p>ReactDOM.render()是怎么解析react元素的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟render函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">eleObj, container</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 解构出标签的类型和属性对象</span></span><br><span class="line">  <span class="keyword">let</span> &#123;type, props&#125; = eleObj;</span><br><span class="line">  <span class="comment">// 创建一个DOM元素</span></span><br><span class="line">  <span class="keyword">let</span> ele = <span class="built_in">document</span>.createElement(type);</span><br><span class="line">  <span class="comment">// 循环属性对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> props)&#123;</span><br><span class="line">    <span class="keyword">if</span>(attr == <span class="string">'children'</span>)&#123;</span><br><span class="line">      props[attr].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> item == <span class="string">'string'</span>)&#123;</span><br><span class="line">          <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item);</span><br><span class="line">          ele.appendChild(textNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 递归调用</span></span><br><span class="line">          render(item, ele);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(attr == <span class="string">'className'</span>) &#123;</span><br><span class="line">      ele.setAttribute(<span class="string">'class'</span>,props[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ele.setAttribute(attr, props[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      模拟实现ReactDOM.render()方法
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————Virtual Dom</title>
    <link href="http://yoursite.com/2018/05/22/virtualDom/"/>
    <id>http://yoursite.com/2018/05/22/virtualDom/</id>
    <published>2018-05-22T05:02:01.000Z</published>
    <updated>2018-05-22T05:02:59.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><ul><li>用JS模拟DOM结构</li><li>DOM变化的对比，放在JS层来做（图灵完备语言）</li><li>提高重绘性能</li></ul><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><p>页面渲染过程：<br><img src="https://i.imgur.com/WEJCK1f.jpg" alt="重绘和回流"></p><ul><li>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。</li><li>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</li></ul><h3 id="模拟虚拟DOM"><a href="#模拟虚拟DOM" class="headerlink" title="模拟虚拟DOM"></a>模拟虚拟DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js模拟虚拟DOM</span></span><br><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'ul'</span>,</span><br><span class="line">  attrs:&#123;</span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 1'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'张三'</span>,<span class="attr">age</span>: <span class="string">'20'</span>,<span class="attr">address</span>: <span class="string">'北京'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'王五'</span>,<span class="attr">age</span>: <span class="string">'22'</span>,<span class="attr">address</span>: <span class="string">'成都'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'李四'</span>,<span class="attr">age</span>: <span class="string">'21'</span>,<span class="attr">address</span>: <span class="string">'上海'</span>&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $container = $(<span class="string">'#container'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 清空容器，重要！！！</span></span></span><br><span class="line"><span class="javascript">      $container.html(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拼接 table</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $table = $(<span class="string">'&lt;table&gt;'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">      $table.append($('<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>address<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;'));</span></span><br><span class="line"><span class="javascript">      data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="xml">      $table.append($('<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.name + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.age + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.address   + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;'))</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 渲染到页面</span></span></span><br><span class="line"><span class="undefined">      $container.append($table);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn-change'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      data[1].age = 30;</span></span><br><span class="line"><span class="javascript">      data[<span class="number">2</span>].address = <span class="string">'深圳'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render  再次渲染</span></span></span><br><span class="line"><span class="undefined">      render(data);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面加载完立刻执行（初次渲染）</span></span></span><br><span class="line"><span class="undefined">    render(data);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然只改变了两个数据，但是整个table都闪烁了（回流&amp;重绘）<br><img src="https://i.imgur.com/x7JUVud.gif" alt=""></p><ul><li>DOM操作是‘昂贵’的，js运行效率高</li><li>尽量减少DOM操作，尽量减少回流重绘</li></ul><h2 id="虚拟DOM如何应用，核心API是什么"><a href="#虚拟DOM如何应用，核心API是什么" class="headerlink" title="虚拟DOM如何应用，核心API是什么"></a>虚拟DOM如何应用，核心API是什么</h2><h3 id="介绍-snabbdom"><a href="#介绍-snabbdom" class="headerlink" title="介绍 snabbdom"></a>介绍 snabbdom</h3><p><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom GitHub地址</a></p><p>官网例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> snabbdom = <span class="built_in">require</span>(<span class="string">'snabbdom'</span>);</span><br><span class="line"><span class="keyword">var</span> patch = snabbdom.init([ <span class="comment">// Init patch function with chosen modules</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/class'</span>).default, <span class="comment">// makes it easy to toggle classes</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/props'</span>).default, <span class="comment">// for setting properties on DOM elements</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/style'</span>).default, <span class="comment">// handles styling on elements with support for animations</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/eventlisteners'</span>).default, <span class="comment">// attaches event listeners</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(<span class="string">'snabbdom/h'</span>).default; <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// h函数生成一个虚拟节点</span></span><br><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: someFn&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125;, <span class="string">'This is bold'</span>),</span><br><span class="line">  <span class="string">' and this is just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/foo'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span></span><br><span class="line">patch(container, vnode); <span class="comment">// 把vnode加入到container中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据改变，重新生成一个newVnode</span></span><br><span class="line"><span class="keyword">var</span> newVnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: anotherEventHandler&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'normal'</span>, <span class="attr">fontStyle</span>: <span class="string">'italic'</span>&#125;&#125;, <span class="string">'This is now italic type'</span>),</span><br><span class="line">  <span class="string">' and this is still just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/bar'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Second `patch` invocation</span></span><br><span class="line"><span class="comment">// 将newVnode更新到之前的vnode中，从而更新视图</span></span><br><span class="line">patch(vnode, newVnode); <span class="comment">// Snabbdom efficiently updates the old view to the new state</span></span><br></pre></td></tr></table></figure></p><h4 id="snabbdom-h-函数"><a href="#snabbdom-h-函数" class="headerlink" title="snabbdom h 函数"></a>snabbdom h 函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'ul'</span>,</span><br><span class="line">  attrs:&#123;</span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 1'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="snabbdom-patch-函数"><a href="#snabbdom-patch-函数" class="headerlink" title="snabbdom patch 函数"></a>snabbdom patch 函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">patch(container, vnode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟改变</span></span><br><span class="line"><span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>);</span><br><span class="line">btnChange.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 111'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 222'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 333'</span>)</span><br><span class="line">  ])</span><br><span class="line">  patch(vnode, newVnode);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="snabbdom例子"><a href="#snabbdom例子" class="headerlink" title="snabbdom例子"></a>snabbdom例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 定义 patch</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">snabbdom_class,</span></span><br><span class="line"><span class="undefined">snabbdom_props,</span></span><br><span class="line"><span class="undefined">snabbdom_style,</span></span><br><span class="line"><span class="undefined">snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">])</span></span><br><span class="line"><span class="javascript"><span class="comment">// 定义 h</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> h = snabbdom.h;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 生成 vnode</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span></span><br><span class="line"><span class="javascript">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span></span><br><span class="line"><span class="undefined">])</span></span><br><span class="line"><span class="undefined">patch(container, vnode);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 模拟数据改变</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>);</span></span><br><span class="line"><span class="javascript">btnChange.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 222'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 333'</span>)</span></span><br><span class="line"><span class="undefined">  ])</span></span><br><span class="line"><span class="undefined">  patch(vnode, newVnode);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看图，只有修改了的数据才进行了刷新，减少了DOM操作，这其实就是vnode与newVnode对比，找出改变了的地方，然后只重新渲染改变的<br><img src="https://i.imgur.com/bkGqypK.gif" alt=""></p><h3 id="重做之前的demo"><a href="#重做之前的demo" class="headerlink" title="重做之前的demo"></a>重做之前的demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义关键函数 patch</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">      snabbdom_class,</span></span><br><span class="line"><span class="undefined">      snabbdom_props,</span></span><br><span class="line"><span class="undefined">      snabbdom_style,</span></span><br><span class="line"><span class="undefined">      snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">    ]);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义关键函数 h</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h = snabbdom.h;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 原始数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">name</span>: <span class="string">'张三'</span>,<span class="attr">age</span>: <span class="string">'20'</span>,<span class="attr">address</span>: <span class="string">'北京'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'王五'</span>,<span class="attr">age</span>: <span class="string">'22'</span>,<span class="attr">address</span>: <span class="string">'成都'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'李四'</span>,<span class="attr">age</span>: <span class="string">'21'</span>,<span class="attr">address</span>: <span class="string">'上海'</span>&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 把表头也放在 data 中</span></span></span><br><span class="line"><span class="undefined">    data.unshift(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'姓名'</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">'年龄'</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">'地址'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vnode;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> newVnode = h(<span class="string">'table'</span>, &#123;&#125;, data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tds = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (i <span class="keyword">in</span> item) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.hasOwnProperty(i)) &#123;</span></span><br><span class="line"><span class="javascript">            tds.push(h(<span class="string">'td'</span>, &#123;&#125;, item[i] + <span class="string">''</span>));</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> h(<span class="string">'tr'</span>, &#123;&#125;, tds)</span></span><br><span class="line"><span class="undefined">      &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (vnode) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// re-render</span></span></span><br><span class="line"><span class="undefined">        patch(vnode, newVnode);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 初次渲染</span></span></span><br><span class="line"><span class="undefined">        patch(container, newVnode);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 存储当前的 vnode 结果</span></span></span><br><span class="line"><span class="undefined">      vnode = newVnode;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初次渲染</span></span></span><br><span class="line"><span class="undefined">    render(data)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>)</span></span><br><span class="line"><span class="javascript">    btnChange.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      data[1].age = 30</span></span><br><span class="line"><span class="javascript">      data[<span class="number">2</span>].address = <span class="string">'深圳'</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render</span></span></span><br><span class="line"><span class="undefined">      render(data)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/aptwoC0.gif" alt=""></p><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><ul><li>h(‘&lt;标签名&gt;’,{…属性…},[…子元素…])</li><li>h(‘&lt;标签名&gt;’,{…属性…},’…’)</li><li>patch(container,vnode)</li><li>patch(vnode,newVnode)</li></ul><h2 id="简单介绍-diff-算法"><a href="#简单介绍-diff-算法" class="headerlink" title="简单介绍 diff 算法"></a>简单介绍 diff 算法</h2><h3 id="什么是-diff-算法"><a href="#什么是-diff-算法" class="headerlink" title="什么是 diff 算法"></a>什么是 diff 算法</h3><p>这里有两个文本文件：<br><img src="https://i.imgur.com/RSJ5XMS.png" alt=""><br>借用<code>git bash</code>中 <code>diff</code> 命令可以比较两个文件的区别：<br><img src="https://i.imgur.com/cHgP1Rv.png" alt=""></p><p><a href="https://www.diffchecker.com/" target="_blank" rel="noopener">在线diff工具</a></p><p><img src="https://i.imgur.com/S1yiL9h.png" alt=""></p><p>虚拟DOM —&gt; DOM<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个实现流程，实际情况还很复杂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tag = vnode.tag  <span class="comment">// 'ul'</span></span><br><span class="line">  <span class="keyword">var</span> attrs = vnode.attrs || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> children = vnode.children || []</span><br><span class="line">  <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建真实的 DOM 元素</span></span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(tag)</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">var</span> attrName</span><br><span class="line">  <span class="keyword">for</span> (attrName <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (attrs.hasOwnProperty(attrName)) &#123;</span><br><span class="line">      <span class="comment">// 给 elem 添加属性</span></span><br><span class="line">      elem.setAttribute(attrName, attrs[attrName])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子元素</span></span><br><span class="line">  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给 elem 添加子元素</span></span><br><span class="line">    elem.appendChild(createElement(childVnode))  <span class="comment">// 递归</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回真实的 DOM 元素</span></span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vnode —&gt; newVnode<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> children = vnode.children || [];</span><br><span class="line">  <span class="keyword">var</span> newChildren = newVnode.children || [];</span><br><span class="line"></span><br><span class="line">  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newChildVnode = newChildren[index];</span><br><span class="line">    <span class="keyword">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class="line">        <span class="comment">// 深层次对比，递归</span></span><br><span class="line">        updateChildren(childVnode, newChildVnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        replaceNode(childVnode, newChildVnode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNode</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = vnode.elem;  <span class="comment">// 真实的 DOM 节点</span></span><br><span class="line">  <span class="keyword">var</span> newElem = createElement(newVnode);</span><br><span class="line">  <span class="comment">// 替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————异步</title>
    <link href="http://yoursite.com/2018/05/21/async/"/>
    <id>http://yoursite.com/2018/05/21/async/</id>
    <published>2018-05-21T06:38:23.000Z</published>
    <updated>2018-05-21T06:42:19.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><ul><li>什么是单线程，和异步有什么关系</li><li>什么是event-loop</li><li>是否用过jQuery的Deferred</li><li>Promise的基本使用和原理</li><li>介绍一下async/await(和Promise的区别、联系)</li><li>异步解决方案</li></ul><h2 id="什么是单线程，和异步有什么关系"><a href="#什么是单线程，和异步有什么关系" class="headerlink" title="什么是单线程，和异步有什么关系"></a>什么是单线程，和异步有什么关系</h2><blockquote><p>单线程-只有一个线程，只做一件事。JS之所以是单线程，取决于它的实际使用，例如JS不可能同添加一个DOM和删除这个DOM，所以它只能是单线程的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上面这个例子中，当执行了<code>alert(1)</code>,如果用户不点击确定按钮，<code>console.log(2)</code>是不会执行的。</p><blockquote><p>为了利用多核CPU的计算能力，HTML5提出<code>WebWorker</code>标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><h2 id="js异步"><a href="#js异步" class="headerlink" title="js异步"></a>js异步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">200</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>);</span><br><span class="line">.... <span class="comment">// 这里来很多很多个console.log(400); 结果就是打印完所有的400，等一秒再打印200</span></span><br></pre></td></tr></table></figure><h2 id="event-loop"><a href="#event-loop" class="headerlink" title="event-loop"></a>event-loop</h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="event-loop"></p><h3 id="文字解释"><a href="#文字解释" class="headerlink" title="文字解释"></a>文字解释</h3><ul><li>事件轮询，JS实现异步的具体解决方案</li><li>同步代码，直接执行</li><li>异步函数先放在异步队列中</li><li>待同步函数执行完毕，轮询执行 异步队列 的函数</li></ul><p>上面那个例子的执行效果就是这样的：<br><img src="https://i.imgur.com/eAYeNea.png" alt=""><br>实例分析：<br><img src="https://i.imgur.com/tW0BkDD.png" alt=""><br><img src="https://i.imgur.com/EJ4jsZc.png" alt=""></p><blockquote><p>这个例子中有两种情况，取决于ajax的返回时间，如果ajax时间小于100ms它就先放进异步队列</p></blockquote><h2 id="Jquery-Deferred"><a href="#Jquery-Deferred" class="headerlink" title="Jquery Deferred"></a>Jquery Deferred</h2><h3 id="Jquery1-5前后的变化"><a href="#Jquery1-5前后的变化" class="headerlink" title="Jquery1.5前后的变化"></a>Jquery1.5前后的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = $.ajax(&#123;</span><br><span class="line">  url: <span class="string">'data.json'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success2'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success3'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ajax); <span class="comment">// 返回一个xhr对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式操作</span></span><br><span class="line"><span class="keyword">var</span> ajax = $.ajax(<span class="string">'data.json'</span>);</span><br><span class="line">ajax.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ajax); <span class="comment">// 返回一个deferred对象</span></span><br></pre></td></tr></table></figure><ul><li>无法改变JS异步和单线程的本质</li><li>只能从写法上杜绝callback这种形式</li><li>它是一种语法糖形式，但是解耦了代码</li><li>很好的体现：开放封闭原则（对扩展开放，对修改封闭）</li></ul><h3 id="使用Jquery-Deferred"><a href="#使用Jquery-Deferred" class="headerlink" title="使用Jquery Deferred"></a>使用Jquery Deferred</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给出一段非常简单的异步操作代码，使用setTimeout函数</span></span><br><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行完成)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  setTimeout(task, 2000);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">wait();</span></span><br></pre></td></tr></table></figure><p>新增需求：要在执行完成之后进行某些特别复杂的操作，代码可能会很多，而且分好几个步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 创建一个deferred对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123; <span class="comment">// 要求传入一个deferred对象</span></span><br><span class="line">    <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">      dtd.resolve(); <span class="comment">// 表示异步任务已经完成</span></span><br><span class="line">      <span class="comment">// dtd.reject(); // 表示异步任务失败或出错</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> dtd; <span class="comment">// 要求返回deferred对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注意，这里一定要有返回值</span></span><br><span class="line">  <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当执行dtd.reject()时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不能链式</span></span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面封装的<code>waitHandle</code>方法,由于直接返回了<code>dtd</code>（deferred对象），所以用户可以直接调用<code>w.reject()</code>方法，导致无论是成功还是失败，最后都走失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred();</span><br><span class="line">  <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">      dtd.resolve(); </span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> dtd.promise(); <span class="comment">// 注意这里返回的是promise，而不是直接返回deferred对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ES6的Promise：<a href="https://finget.github.io/2018/03/08/promise/" target="_blank" rel="noopener">点这里</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise封装一个异步加载图片的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><blockquote><p>这是ES7提案中的，现在babel已经开始支持了，koa也是用async/await实现的。</p></blockquote><ul><li>then 只是将callback拆分了</li><li>async/await 是最直接的同步写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result1 = <span class="keyword">await</span> loadImg(src1);</span><br><span class="line">  <span class="built_in">console</span>.log(result1);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">await</span> loadImg(src2);</span><br><span class="line">  <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br><span class="line">load();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————prototype</title>
    <link href="http://yoursite.com/2018/05/10/javascript-prototype/"/>
    <id>http://yoursite.com/2018/05/10/javascript-prototype/</id>
    <published>2018-05-10T03:56:15.000Z</published>
    <updated>2018-05-10T04:00:14.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>下面内容为转载的，<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">原地址</a>,写的真的很好！</p></blockquote><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>我们先使用构造函数创建一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p><p>很简单吧，接下来进入正题：</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 虽然写在注释里，但是你要注意：</span></span><br><span class="line"><span class="comment">// prototype是函数才会有的属性</span></span><br><span class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">// Kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>那这个函数的 <code>prototype</code> 属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的 <code>prototype</code> 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。</p><p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：</p><p><img src="https://s26.postimg.cc/x6u11fq6h/prototype1.png" alt="构造函数和实例原型的关系图"><br>在这张图中我们用 Object.prototype 表示实例原型。</p><p>那么我们该怎么表示实例与实例原型，也就是 <code>person</code> 和 <code>Person.prototype</code> 之间的关系呢，这时候我们就要讲到第二个属性：</p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h4><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<code>__proto__</code>，这个属性会指向该对象的原型。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>于是我们更新下关系图：</p><p><img src="https://s26.postimg.cc/6lri5wy3t/prototype2.png" alt="实例与实例原型的关系图"></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：<code>constructor</code>，每个原型都有一个 <code>constructor</code> 属性指向关联的构造函数。</p><p>为了验证这一点，我们可以尝试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>所以再更新下关系图：</p><p><img src="https://s26.postimg.cc/pqurfozx5/prototype3.png" alt="实例原型与构造函数的关系图"></p><p>综上我们已经得出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ == Person.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor == Person) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === Person.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p><h3 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h3><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'Daisy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Daisy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p>在这个例子中，我们给实例对象 <code>person</code> 添加了 <code>name</code> 属性，当我们打印 <code>person.name</code> 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 <code>person</code> 的 <code>name</code> 属性时，读取 <code>person.name</code>，从 <code>person</code> 对象中找不到 <code>name</code> 属性就会从 <code>person</code> 的原型也就是 <code>person.__proto__</code> ，也就是 <code>Person.prototype</code>中查找，幸运的是我们找到了 <code>name</code> 属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h4 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h4><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">'Kevin'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code> ，所以我们再更新下关系图：</p><p><img src="https://s26.postimg.cc/ucqvo2o15/prototype4.png" alt="原型的原型关系图"></p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>那 <code>Object.prototype</code> 的原型呢？</p><p>null，我们可以打印：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>然而 null 究竟代表了什么呢？</p><p>引用阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">《undefined与null的区别》</a> 就是：</p><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以 <code>Object.prototype.__proto__</code> 的值为 null 跟 <code>Object.prototype</code> 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 <code>Object.prototype</code> 就可以停止查找了。</p><p>最后一张关系图也可以更新为：</p><p><img src="https://s26.postimg.cc/8dkh0vuc9/prototype5.png" alt="原型链示意图"></p><p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>最后，补充三点大家可能不会注意的地方：</p><h4 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h4><p>首先是 constructor 属性，我们看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.constructor === Person.prototype.constructor</span><br></pre></td></tr></table></figure></p><h4 id="proto-1"><a href="#proto-1" class="headerlink" title="proto"></a><strong>proto</strong></h4><p>其次是 <code>__proto__</code> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 <code>Person.prototype</code> 中，实际上，它是来自于 <code>Object.prototype</code> ，与其说是一个属性，不如说是一个 <code>getter/setter</code>，当使用 <code>obj.__proto__</code> 时，可以理解成返回了 <code>Object.getPrototypeOf(obj)</code>。</p><h4 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h4><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，<strong>委托</strong>的说法反而更准确些。</p><blockquote><p>推荐阅读:<a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">阮一峰Javascript继承机制的设计思想</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————ES6</title>
    <link href="http://yoursite.com/2018/05/10/javascript-es6/"/>
    <id>http://yoursite.com/2018/05/10/javascript-es6/</id>
    <published>2018-05-10T03:50:50.000Z</published>
    <updated>2018-06-06T07:49:53.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><blockquote><p>现在基本上开发中都在使用ES6，浏览器环境支持不好，可以用babel插件来解决。</p></blockquote><p>采用‘二八定律’，主要涉及ES6常用且重要的部分。</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>ES6模块化如何使用，开发环境如何打包</li><li>Class和普通构造函数有何区别</li><li>Promise的基本使用和原理</li><li>总结一下ES6其他常用功能</li></ul><h3 id="ES6模块化如何使用，开发环境如何打包"><a href="#ES6模块化如何使用，开发环境如何打包" class="headerlink" title="ES6模块化如何使用，开发环境如何打包"></a>ES6模块化如何使用，开发环境如何打包</h3><h4 id="模块化的基本语法"><a href="#模块化的基本语法" class="headerlink" title="模块化的基本语法"></a>模块化的基本语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  a : <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> str;</span><br><span class="line"><span class="comment">// export default const str = 'hello'; X</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util2.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fn3 = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./util1.js'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fn1 , fn2&#125; <span class="keyword">from</span> <span class="string">'./util2.js'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fn <span class="keyword">from</span> <span class="string">'./util2.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line">fn1();</span><br><span class="line">fn2();</span><br><span class="line"></span><br><span class="line">fn.fn1();</span><br><span class="line">fn.fn2();</span><br></pre></td></tr></table></figure><blockquote><p><code>export default</code> 默认输出这个，然后在<code>import</code>的时候就会拿到默认输出的内容。例子中默认输出的<code>a=100</code>。<br><code>export</code>多个内容，在<code>import</code>时需要使用<code>{}</code>进行引用你需要的内容。</p></blockquote><h5 id="export和export-default与exports和module-exports的区别"><a href="#export和export-default与exports和module-exports的区别" class="headerlink" title="export和export default与exports和module.exports的区别"></a><code>export</code>和<code>export default</code>与<code>exports</code>和<code>module.exports</code>的区别</h5><blockquote><p><code>require</code>: node 和 es6 都支持的引入<br><code>export</code> / <code>import</code> : 只有es6 支持的导出引入<br><code>module.exports</code> / <code>exports</code>: 只有 node 支持的导出</p></blockquote><ol><li><code>module.exports</code> 初始值为一个空对象 {}<ol start="2"><li><code>exports</code> 是指向的 <code>module.exports</code> 的引用</li><li><code>require()</code> 返回的是 <code>module.exports</code> 而不是 <code>exports</code></li></ol></li></ol><p><code>Node</code>里面的模块系统遵循的是CommonJS规范。</p><blockquote><p>CommonJS定义的模块分为: 模块标识(<code>module</code>)、模块定义(<code>exports</code>) 、模块引用(<code>require</code>)</p></blockquote><p>在nodejs，<code>exports</code> 是 <code>module.exports</code>的引用，初始化时，它们都指向同一个<code>{}</code>对象。</p><p>对象在JS中属于引用类型，意思就是<code>exports</code>和<code>module.exports</code>是指向同一个内存地址的。<br><img src="https://i.imgur.com/pA9FAlZ.png" alt=""></p><p>看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这两种情况的效果是一样的，上面说了exports与`module.exports初始化同一个对象，所以两种定义方就是给这个同对象定义了一个fn的属性，该属性值为一个函数。</span></span><br><span class="line"><span class="built_in">module</span>.exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这两种情况就不一样了。上面的exports想当于指向了另一个内存地址。而下面这种情况是可以正常导出的。</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。</strong></p></blockquote><ul><li>module.exports 的使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sayHello.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sayHello;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="built_in">require</span>(<span class="string">'./sayHello'</span>);</span><br><span class="line"></span><br><span class="line">sayHello();</span><br></pre></td></tr></table></figure><p>定义一个sayHello模块，模块里定义了一个sayHello方法，通过替换当前模块exports对象的方式将sayHello方法导出。<br>在app.js中加载这个模块，得到的是一个函数，调用该函数，控制台打印hello。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sayWorld.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> sayWorld = <span class="built_in">require</span>(<span class="string">'./sayWorld'</span>); <span class="comment">// 匿名替换</span></span><br><span class="line">sayWorld();</span><br></pre></td></tr></table></figure><ul><li>exports 导出多个变量</li></ul><p>当要导出多个变量怎么办呢？这个时候替换当前模块对象的方法就不实用了，我们需要用到exports对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userExports.js</span></span><br><span class="line">exports.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a exports'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b exports'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> useExports = <span class="built_in">require</span>(<span class="string">'./userExports'</span>);</span><br><span class="line">useExports.a();</span><br><span class="line">useExports.b();</span><br><span class="line"><span class="comment">// a exports</span></span><br><span class="line"><span class="comment">// b exports</span></span><br></pre></td></tr></table></figure><p>当然，将useExports.js改成这样也是可以的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userExports.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a exports'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b exports'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在实际开发当中可以只使用<code>module.exports</code>避免造成不必要的问题。</p></blockquote><h4 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h4><h5 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h5><p><a href="https://babeljs.cn/" target="_blank" rel="noopener">Babel中文网</a></p><ul><li>nodejs环境 npm init</li><li>npm i babel-core babel-preset-es2015 babel-preset-latest –save-dev</li><li>创建.babelrc文件</li><li>npm i –global babel-cli</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"latest"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p><a href="https://finget.github.io/2018/02/08/webpack/" target="_blank" rel="noopener">四大维度解锁webpack3笔记</a></p><h5 id="rollup-js"><a href="#rollup-js" class="headerlink" title="rollup.js"></a>rollup.js</h5><p><a href="http://www.rollupjs.com/" target="_blank" rel="noopener">Rollup.js官网</a></p><ul><li><code>npm init</code></li><li>安装 <code>rollup.js</code>需要的一些插件<br><code>npm i rollup rollup-plugin-node-resolve rollup-plugin-babel babel-core babel-plugin-external-helpers babel-preset-latest --save-dev</code></li><li>配置 .babelrc</li><li>配置 rollup.config.js</li></ul><blockquote><p>rollup 功能单一（打包js模块化）， webpack功能强大<br>工具尽量功能单一，可继承，可扩展</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>:[</span><br><span class="line">    [<span class="string">"latest"</span>, &#123;</span><br><span class="line">      <span class="string">"es2015"</span>:&#123;</span><br><span class="line">        <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>:[<span class="string">"external-helpers"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/index.js'</span>,</span><br><span class="line">  format: <span class="string">'umd'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    resolve(),</span><br><span class="line">    babel(&#123;</span><br><span class="line">      exclude: <span class="string">'node_modules/**'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  dest: <span class="string">'build/bundle.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"rollup -c rollup.config.js"</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>npm run start</code></p><h4 id="关于JS众多模块化标准"><a href="#关于JS众多模块化标准" class="headerlink" title="关于JS众多模块化标准"></a>关于JS众多模块化标准</h4><ul><li>没有模块化</li><li>AMD成为标准，require.js</li><li>前端打包工具，使得nodejs模块化（CommonJS）可以被使用</li><li>ES6出现，想统一现在所有模块化标准</li><li>nodejs积极支持，浏览器尚未统一</li><li>你可以自造lib，但是不要自造标准！！！</li></ul><h3 id="Class和普通构造函数有何区别"><a href="#Class和普通构造函数有何区别" class="headerlink" title="Class和普通构造函数有何区别"></a>Class和普通构造函数有何区别</h3><h4 id="JS构造函数"><a href="#JS构造函数" class="headerlink" title="JS构造函数"></a>JS构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathHandle</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型扩展</span></span><br><span class="line">MathHandle.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> ManthHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="Class基本语法"><a href="#Class基本语法" class="headerlink" title="Class基本语法"></a>Class基本语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathHandle</span> </span>&#123; <span class="comment">// 直接跟大括号</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> ManthHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><blockquote><p><code>typeof MathHandle</code>  = <code>&#39;function&#39;</code><br><code>MathHandle</code>其实是个<code>function</code>,‘构造函数’<br><code>MathHandle</code> === <code>MathHandle.prototype.constructor</code></p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="原生js继承"><a href="#原生js继承" class="headerlink" title="原生js继承"></a>原生js继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'animal eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// 实例化一只狗</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// hashiqi就有了eat方法</span></span><br><span class="line">hashiqi.eat(); <span class="comment">// animal eat</span></span><br></pre></td></tr></table></figure><blockquote><p>廖雪峰老师的原型继承：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="noopener">点这里</a></p></blockquote><h4 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; <span class="comment">// extends 继承</span></span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">// 必须*  记得用super调用父类的构造方法!</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> say`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'hashiqi'</span>);</span><br><span class="line">dog.eat(); <span class="comment">// hashiqi eat</span></span><br></pre></td></tr></table></figure><h3 id="Promise-的基础使用"><a href="#Promise-的基础使用" class="headerlink" title="Promise 的基础使用"></a>Promise 的基础使用</h3><blockquote><p>解决回调地狱（Callback Hell）<br>详细点的Promise：<a href="https://finget.github.io/2018/03/08/promise/" target="_blank" rel="noopener">点这里</a></p></blockquote><h4 id="Promise-基础语法"><a href="#Promise-基础语法" class="headerlink" title="Promise 基础语法"></a>Promise 基础语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line">.....</span><br><span class="line">  resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line">  reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功，下一步</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 失败，做相应处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>我最开始接触到<code>Promise</code>的时候，一直傻了吧唧的在想<code>resolve()</code>和<code>reject()</code>在什么时候调用。<br><code>resolve()</code>和<code>reject()</code>就是为后面<code>then()</code>中的两个函数服务的。</p></blockquote><h4 id="resolve和reject"><a href="#resolve和reject" class="headerlink" title="resolve和reject"></a>resolve和reject</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'good，我要传给then里的一个函数'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    reject(<span class="string">'错了，把我给我then里的第二个函数'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// good，我要传给then里的一个函数</span></span><br><span class="line">&#125;,value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 错了，把我给我then里的第二个函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="来个实际的例子"><a href="#来个实际的例子" class="headerlink" title="来个实际的例子"></a>来个实际的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于jquery封装一个promise ajax请求</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; param [选项]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;       [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">request(param)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      type : param.type || <span class="string">'get'</span>,</span><br><span class="line">      url : param.url || <span class="string">''</span>,</span><br><span class="line">      dataType : param.dataType || <span class="string">'json'</span>,</span><br><span class="line">      data : param.data || <span class="literal">null</span>,</span><br><span class="line">      success:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123; <span class="comment">// 用箭头函数避免this指向问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === res.status) &#123;</span><br><span class="line">       <span class="keyword">typeof</span> resolve === <span class="string">'function'</span>&amp;&amp;resolve(res.data, res.msg); <span class="comment">// 成功就把请求到的数据用resolve返回，这样就可以在then的第一个函数里拿到值了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">typeof</span> reject === <span class="string">'function'</span>&amp;&amp;reject(res.msg || res.data); <span class="comment">// 失败就返回错误信息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      error:<span class="function">(<span class="params">err</span>)=&gt;</span>&#123; <span class="comment">// 这个失败是请求失败，上面那个失败是请求成功发送了，但是没有拿到数据失败了</span></span><br><span class="line">     <span class="keyword">typeof</span> reject === <span class="string">'function'</span>&amp;&amp;reject(err.statusText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6常用其他功能"><a href="#ES6常用其他功能" class="headerlink" title="ES6常用其他功能"></a>ES6常用其他功能</h3><h4 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h4><blockquote><p><code>let</code> <code>const</code>与<code>var</code>都是用来定义变量的，不同的是<code>let</code>自带作用域，<code>const</code>不能重复赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'FinGet'</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'GetFin'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//GetFin</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//FinGet</span></span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>定义的变量只在包含它的代码块内有用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">PI = <span class="number">3.14</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h4 id="多行字符串-模板变量"><a href="#多行字符串-模板变量" class="headerlink" title="多行字符串/模板变量"></a>多行字符串/模板变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'FinGet'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'我是'</span>+ name+<span class="string">',今年'</span>+age+<span class="string">'岁'</span>; <span class="comment">// 很麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age&#125;</span>岁`</span>; <span class="comment">// 简单多了</span></span><br></pre></td></tr></table></figure><blockquote><p>模板字符串就是用<code></code>（Tab键上面那个）包含，变量就是用<code>${}</code>表示</p></blockquote><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'FinGet'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  job: <span class="string">'前端'</span>,</span><br><span class="line">  addr: <span class="string">'成都'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// FinGet</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>还可以反过来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  name = <span class="string">'FinGet'</span>;</span><br><span class="line"><span class="keyword">let</span>  age = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">let</span>  job = <span class="string">'前端'</span>;</span><br><span class="line"><span class="keyword">let</span>  addr = <span class="string">'成都'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;name,age,job,addr&#125;;</span><br><span class="line"><span class="comment">//obj = &#123;name: 'FinGet',age: 22,job: '前端',addr: '成都'&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><blockquote><p>let 自带块级作用域</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>原生js想实现这种效果，需要用到闭包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123; <span class="comment">// 立即执行函数</span></span><br><span class="line">    a[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;(i))</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><blockquote><p>立即执行函数形成了一个块级作用域，将参数j保存了下来，并不会被‘污染’，原生js没有块级作用域，<code>var</code>在<code>for</code>中定义的变量是个全局变量，可以在外部访问，也就可以被改变，所以每次<code>for</code>循环都是重置修改<code>i</code>的值，导致最后只能输出10。</p></blockquote><h4 id="函数默认参数与rest"><a href="#函数默认参数与rest" class="headerlink" title="函数默认参数与rest"></a>函数默认参数与rest</h4><blockquote><p><code>default</code>很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句<code>type = type || &#39;cat&#39;</code>来指定默认值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    type = type || <span class="string">'cat'</span>  </span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure><p>如果用ES6我们而已直接这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal(); <span class="comment">// cat</span></span><br></pre></td></tr></table></figure><p>最后一个rest语法也很简单，直接看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure><blockquote><p>而如果不用ES6的话，我们则得使用ES5的arguments。</p></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6箭头函数</span></span><br><span class="line">(a,b) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>把<code>function</code>去掉，在<code>()</code>与<code>{}</code>之间加上<code>=&gt;</code></p></blockquote><hr><blockquote><p>当我们使用箭头函数时，函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的<code>this</code>，它的<code>this</code>是继承外面的，因此内部的<code>this</code>就是外层代码块的<code>this</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>在线考试系统（vue2 + elementui + express4 + MongoDB）</title>
    <link href="http://yoursite.com/2018/05/05/exam/"/>
    <id>http://yoursite.com/2018/05/05/exam/</id>
    <published>2018-05-05T07:05:55.000Z</published>
    <updated>2018-06-08T08:46:49.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我毕业项目，从0到1，前后台独立开发完成。功能不多，在此记录,温故而知新！项目github地址:<a href="https://github.com/FinGet/Exam" target="_blank" rel="noopener">https://github.com/FinGet/Exam</a> ，博客地址：<a href="https://finget.github.io/" target="_blank" rel="noopener">https://finget.github.io/</a>。</p></blockquote><hr><blockquote><p>更新记录：2018-4-9，md5加密</p></blockquote><h2 id="win10安装mongodb"><a href="#win10安装mongodb" class="headerlink" title="win10安装mongodb"></a>win10安装mongodb</h2><p>window下安装mongodb，需要参考的可以移步我的博客中：<a href="https://finget.github.io/2018/05/05/win-mongodb/" target="_blank" rel="noopener">win10安装mongodb</a></p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>本次项目使用的是express4 + vue2+ + elementUI1+ + mongodb3.4+</p><p>先看项目文件目录结构：</p><p><img src="https://i.imgur.com/RV9862f.png" alt=""></p><blockquote><p>我页面用的vue所以<code>server/views</code>和<code>server/public</code>都没有用</p></blockquote><ul><li>项目建立用的是vue-cli:<br><code>vue init webpack exam</code></li><li>项目中前后台是写在一个项目中的：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g express-generator</span><br><span class="line"><span class="comment">// 在项目文件根目录下</span></span><br><span class="line">express server</span><br></pre></td></tr></table></figure></li></ul><p>由于前后台都是写在一个项目中的，我就将<code>server</code>下的<code>package.json</code>和<code>vue</code>下的<code>package.json</code>合并了</p><p><img src="https://i.imgur.com/a5uBeQh.png" alt=""></p><h3 id="安装一些插件"><a href="#安装一些插件" class="headerlink" title="安装一些插件"></a>安装一些插件</h3><h4 id="axios-请求数据"><a href="#axios-请求数据" class="headerlink" title="axios 请求数据"></a>axios 请求数据</h4><p><code>npm i axios --save</code><br>首先axios不支持vue.use()式声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中如下声明使用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">Vue.prototype.$axios=axios;</span><br><span class="line"><span class="comment">// 那么在其他vue组件中就可以this.$axios调用使用</span></span><br></pre></td></tr></table></figure></p><h4 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h4><p><code>npm i element-ui --save</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">// 加载ElementUI</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span></span><br><span class="line">Vue.use(ElementUI) <span class="comment">// 全局使用elementUI</span></span><br></pre></td></tr></table></figure></p><h4 id="vue-lazyload-图片懒加载"><a href="#vue-lazyload-图片懒加载" class="headerlink" title="vue-lazyload 图片懒加载"></a>vue-lazyload 图片懒加载</h4><p><code>npm i vue-lazyload --save</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> VueLazyLoad <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></span><br><span class="line">Vue.use(VueLazyLoad, &#123; <span class="comment">// 全局使用图片懒加载</span></span><br><span class="line">  loading: <span class="string">'static/loading-svg/loading-bars.svg'</span>, <span class="comment">// 图片还没加载时的svg图片</span></span><br><span class="line">  <span class="keyword">try</span>: <span class="number">1</span> <span class="comment">// default 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用懒加载：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=<span class="string">"300"</span> height=<span class="string">"53"</span> v-lazy=<span class="string">"logoSrc"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">logoSrc:<span class="built_in">require</span>(<span class="string">'../common/img/logo.png'</span>)</span><br><span class="line"><span class="comment">// 不能写成：&lt;img width="300" height="53" v-lazy="../common/img/logo.png" alt=""&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="mongoose-操作mongodb的"><a href="#mongoose-操作mongodb的" class="headerlink" title="mongoose 操作mongodb的"></a>mongoose 操作mongodb的</h4><p><code>npm i mongoose --save</code></p><blockquote><p>就不一一列举所有的插件了（没有用vuex）</p></blockquote><h2 id="开发上的一些事"><a href="#开发上的一些事" class="headerlink" title="开发上的一些事"></a>开发上的一些事</h2><h3 id="前台相关"><a href="#前台相关" class="headerlink" title="前台相关"></a>前台相关</h3><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonFun.js</span></span><br><span class="line"><span class="comment">//获取sessionStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSessionStorage</span>(<span class="params">key, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="keyword">if</span> (sessionStorage.getItem(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (format == <span class="string">'json'</span>) &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(key));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      data = sessionStorage.getItem(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入sessionStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSessionStorage</span>(<span class="params">key, content, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="keyword">if</span> (format == <span class="string">'json'</span>) &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(content);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = content;</span><br><span class="line">  &#125;</span><br><span class="line">  sessionStorage.setItem(key, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> mySessionStorage = &#123;</span><br><span class="line">  get: getSessionStorage,</span><br><span class="line">  set: setSessionStorage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局挂载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> commonFun <span class="keyword">from</span> <span class="string">'./common/js/commonFun.js'</span></span><br><span class="line">Vue.prototype.$mySessionStorage = commonFun.mySessionStorage;</span><br></pre></td></tr></table></figure></p><p>在页面中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$mySessionStorage.set(key,content,format);</span><br><span class="line"><span class="keyword">this</span>.$mySessionStorage.get(key);</span><br></pre></td></tr></table></figure></p><h4 id="登录检测"><a href="#登录检测" class="headerlink" title="登录检测"></a>登录检测</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 登录判断</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> userdata = getUserData();</span><br><span class="line">  <span class="keyword">if</span> (to.path != <span class="string">'/managelogin'</span>&amp;&amp;to.name!=<span class="string">'404'</span>&amp;&amp;to.path != <span class="string">'/'</span>&amp;&amp;to.path != <span class="string">"/frontregister"</span>&amp;&amp;to.path!=<span class="string">'/manageregister'</span>) &#123;  <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="keyword">if</span>(!userdata.userName)&#123;</span><br><span class="line">      ElementUI.Message.error(<span class="string">'抱歉，您还没有登录！'</span>);</span><br><span class="line">      <span class="keyword">if</span>(to.path.indexOf(<span class="string">'front'</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        router.push(&#123;<span class="attr">path</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        router.push(&#123;<span class="attr">path</span>:<span class="string">'/managelogin'</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><blockquote><p>绑定面包屑要根据实际情况来定，但是<code>this.$router.currentRoute.matched</code>是最主要的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"bread"</span>&gt;</span><br><span class="line">    &lt;el-breadcrumb separator=<span class="string">"/"</span>&gt;</span><br><span class="line">      &lt;el-breadcrumb-item v-<span class="keyword">for</span>=<span class="string">"(item, index) in breadData"</span> :key=<span class="string">"item.id"</span> :to=<span class="string">"&#123; name: item.meta.breadName=='管理系统'?'Index':item.name &#125;"</span>&gt;&#123;&#123;item.meta.breadName&#125;&#125;&lt;<span class="regexp">/el-breadcrumb-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-breadcrumb&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        breadData:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      $route () &#123;</span><br><span class="line">        <span class="keyword">this</span>.initBreadData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      <span class="comment">//面包屑</span></span><br><span class="line">      initBreadData()&#123;</span><br><span class="line">        <span class="keyword">this</span>.breadData=<span class="keyword">this</span>.$router.currentRoute.matched;</span><br><span class="line">        <span class="comment">// console.log(this.breadData)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      <span class="keyword">this</span>.initBreadData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>路由部分：</p><p><img src="https://i.imgur.com/pagOWnL.png" alt=""></p><h4 id="elementui面包屑导航与左侧导航相对应"><a href="#elementui面包屑导航与左侧导航相对应" class="headerlink" title="elementui面包屑导航与左侧导航相对应"></a>elementui面包屑导航与左侧导航相对应</h4><blockquote><p>根据实际情况来，不能套用，要看你的路由怎么写的 <code>this.$router.currentRoute.path</code><br><code>:default-active=&quot;activeIndex&quot;</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conponents/sidebar.vue</span></span><br><span class="line"><span class="comment">//初始化列表active状态</span></span><br><span class="line">...</span><br><span class="line">methods:&#123;</span><br><span class="line">  initActiveIndex()&#123;</span><br><span class="line">    <span class="comment">// var str =this.$router.currentRoute.path;</span></span><br><span class="line">    <span class="keyword">this</span>.activeIndex=<span class="keyword">this</span>.$router.currentRoute.path;</span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">  <span class="string">'$route'</span>:<span class="string">'initActiveIndex'</span></span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">this</span>.initActiveIndex();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>要想请求到后台数据，这一步是必须的<br>配置代理之后，localhost:8088/api/<em> -&gt; localhost:3000/api/</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config/index.js</span><br><span class="line">proxyTable: &#123;</span><br><span class="line">  // proxy all requests starting with /api to jsonplaceholder</span><br><span class="line">  &apos;/api&apos;: &#123;</span><br><span class="line">    target: &apos;http://127.0.0.1:3000/api&apos;, // 端口号根据后台设置来，默认是3000</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/api&apos;: &apos;&apos;  // 若target中没有/api、这里又为空，则404；</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="ElementUi动态增加表单的表单验证-大坑"><a href="#ElementUi动态增加表单的表单验证-大坑" class="headerlink" title="ElementUi动态增加表单的表单验证 大坑"></a>ElementUi动态增加表单的表单验证 大坑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  v-<span class="keyword">if</span>=<span class="string">"dialogForm.type!='judgement'&amp;&amp;dialogForm.type!='Q&amp;A'"</span>&gt;</span><br><span class="line">    &lt;el-form-item v-<span class="keyword">for</span>=<span class="string">"(item,index) in dialogForm.surveyQuestionOptionList"</span></span><br><span class="line">    :key=<span class="string">"item.key"</span></span><br><span class="line">    :label=<span class="string">"'选项'+(index+1) +'：'"</span></span><br><span class="line">    :prop=<span class="string">"'surveyQuestionOptionList.' + index + '.optionContent'"</span></span><br><span class="line">    :rules=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">      required:true, message:'选项不能为空', trigger:'blur'</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">    &gt;</span><br><span class="line">    <span class="comment">// 最重要的是prop 一定要带上`.optionContent`，也就是你绑定值的key</span></span><br><span class="line">      &lt;el-input placeholder=<span class="string">"请输入选项"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog_input"</span> v-model=<span class="string">"item.optionContent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-delete delete-icon"</span> @<span class="attr">click</span>=<span class="string">"deleteDlalogOption(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">    &lt;el-button type="primary" size="small" class="marginB10" @click="addDialogOption"&gt;添加选项&lt;/el-button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="query要用path来引入，params要用name来引入"><a href="#query要用path来引入，params要用name来引入" class="headerlink" title="query要用path来引入，params要用name来引入"></a>query要用path来引入，params要用name来引入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goToExam(id)&#123;</span><br><span class="line"><span class="comment">// params传参只能用name引入</span></span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'ForntExam'</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Elementui-单选框对上单选题"><a href="#Elementui-单选框对上单选题" class="headerlink" title="Elementui 单选框对上单选题"></a>Elementui 单选框对上单选题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"single"</span>&gt;</span><br><span class="line">    &lt;h4&gt;单选题（只有一个正确答案）&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li class="marginB10" v-for="(item,index) in singleQuestions" :key="item.id"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p class="question-title"&gt;&#123;&#123;index+1&#125;&#125; 、&#123;&#123;item.name&#125;&#125;（）&lt;/</span>p&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"option"</span></span><br><span class="line">              v-<span class="keyword">if</span>=<span class="string">"item.type!='judgement'&amp;&amp;item.type!='Q&amp;A'"</span>item</span><br><span class="line">              v-<span class="keyword">for</span>=<span class="string">"(item1,index1) in item.selection"</span> :key=<span class="string">"item1.id"</span>&gt;</span><br><span class="line">          &lt;el-radio v-model=<span class="string">"item.sanswer"</span> :label=<span class="string">"options[index1]"</span> :key=<span class="string">"index1"</span>&gt;&#123;&#123;options[index1]&#125;&#125;、&#123;&#123;item1&#125;&#125;&lt;<span class="regexp">/el-radio&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">init()&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.id == <span class="string">''</span> || !<span class="keyword">this</span>.id )&#123;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">'forntexamindex'</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$axios.get(<span class="string">'/api/getExamInfo'</span>,&#123;</span><br><span class="line">      params:&#123;</span><br><span class="line">        id: <span class="keyword">this</span>.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = response.data;</span><br><span class="line">      <span class="keyword">if</span>(res.status == <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.paperData) &#123;</span><br><span class="line">          <span class="keyword">this</span>.paperData[key] = res.result[key];</span><br><span class="line">        &#125;</span><br><span class="line">        res.result._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(item.type==<span class="string">'single'</span>)&#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>; <span class="comment">// 重要的在这 给他新增一个属性，用来存答案</span></span><br><span class="line">            <span class="keyword">this</span>.singleQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'multi'</span>)&#123;</span><br><span class="line">            item.sanswer = []; <span class="comment">// 多选题</span></span><br><span class="line">            <span class="keyword">this</span>.multiQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'Q&amp;A'</span>) &#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>; </span><br><span class="line">            <span class="keyword">this</span>.QAQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'judgement'</span>)&#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">this</span>.judgeQuestions.push(item);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(err);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后台相关"><a href="#后台相关" class="headerlink" title="后台相关"></a>后台相关</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>在server根目录下新建<code>db.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> dbUrl = <span class="string">'mongodb://127.0.0.1:27017/examSystem'</span>;</span><br><span class="line"><span class="keyword">var</span> db = mongoose.connect(dbUrl);</span><br><span class="line">db.connection.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据库链接失败：'</span>+ error);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">'connected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据库链接成功!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">'disconnected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Mongoose connection disconnected'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/app.js</span></span><br><span class="line"><span class="comment">// 链接数据库</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br></pre></td></tr></table></figure><h4 id="配置seesion"><a href="#配置seesion" class="headerlink" title="配置seesion"></a>配置seesion</h4><p>需要<code>express-session</code> 和 <code>cookie-parser</code>插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 加载解析session的中间件</span></span><br><span class="line"><span class="comment">// session 的 store 有四个常用选项：1）内存 2）cookie 3）缓存 4）数据库</span></span><br><span class="line"><span class="comment">// 数据库 session。除非你很熟悉这一块，知道自己要什么，否则还是老老实实用缓存吧 需要用到（connect-mongo插件 line 7）</span></span><br><span class="line"><span class="comment">// app.use(sessionParser(&#123; 会在数据库中新建一个session集合存储session</span></span><br><span class="line"><span class="comment">// secret: 'express',</span></span><br><span class="line"><span class="comment">// store: new mongoStore(&#123;</span></span><br><span class="line"><span class="comment">// url:'mongodb://127.0.0.1:27017/examSystem',</span></span><br><span class="line"><span class="comment">// collection:'session'</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// &#125;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认使用内存来存 session，对于开发调试来说很方便</span></span><br><span class="line">app.use(sessionParser(&#123;</span><br><span class="line">  secret: <span class="string">'12345'</span>, <span class="comment">// 建议使用 128 个字符的随机字符串</span></span><br><span class="line">  name: <span class="string">'userInfo'</span>,</span><br><span class="line">  cookie: &#123; <span class="attr">maxAge</span>: <span class="number">1800000</span> &#125;, <span class="comment">// 时间可以长点</span></span><br><span class="line">  resave:<span class="literal">true</span>,</span><br><span class="line">  rolling:<span class="literal">true</span>,</span><br><span class="line">  saveUninitialized:<span class="literal">false</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h4 id="配置后台路由"><a href="#配置后台路由" class="headerlink" title="配置后台路由"></a>配置后台路由</h4><p>默认的使用方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// appi.js</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, index);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>我之前做的一个电子商城采用的这种方式：<a href="https://github.com/FinGet/Node-vue-mongodb" target="_blank" rel="noopener">github地址</a></p><p>我的项目中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> indexs = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/routes'</span>);</span><br><span class="line"></span><br><span class="line">indexs(app);</span><br><span class="line">routes(app);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">'/api'</span>, (req, res) =&gt; &#123;</span><br><span class="line">res.render(<span class="string">'index'</span>, &#123;<span class="attr">title</span>: <span class="string">'Express'</span>&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式有什么不同：</p><ul><li>如果你有多个路由文件 （例如<code>goods.js</code>,<code>index.js</code>,<code>users.js</code>……）,你都需要去app.js中引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"><span class="keyword">var</span> goods = <span class="built_in">require</span>(<span class="string">'./routes/goods'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, index);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="string">'/goods'</span>, goods);</span><br></pre></td></tr></table></figure><p>在前台请求的时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goods.js</span></span><br><span class="line">....</span><br><span class="line">router.get(<span class="string">"/list"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'/goods/list'</span>).then()... <span class="comment">// 不能忘了加上goods，也就是你在app.js中定义的一级路由</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>如果没看懂，可以去<a href="https://github.com/FinGet/Node-vue-mongodb" target="_blank" rel="noopener">GitHub</a>上看一下实际代码，有助于理解</p></blockquote><ul><li>第二种方式<br>不用在app.js中引入各个路由文件，一个<code>route.js</code>就搞定了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.js</span></span><br><span class="line"><span class="keyword">var</span> Teacher = <span class="built_in">require</span>(<span class="string">'../controllers/teacher'</span>),</span><br><span class="line">    Student = <span class="built_in">require</span>(<span class="string">'../controllers/student'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*----------------------教师用户----------------------*/</span></span><br><span class="line">  app.post(<span class="string">'/api/register'</span>,Teacher.register);</span><br><span class="line">  <span class="comment">// 用户登录</span></span><br><span class="line">  app.post(<span class="string">'/api/login'</span>, Teacher.signup);</span><br><span class="line">  <span class="comment">// 登出</span></span><br><span class="line">  app.post(<span class="string">"/api/logout"</span>, Teacher.signout);</span><br><span class="line">  <span class="comment">// 获取用户信息</span></span><br><span class="line">  app.post(<span class="string">'/api/getUserInfo'</span>,Teacher.getUserInfo);</span><br><span class="line">  <span class="comment">// 修改用户信息</span></span><br><span class="line">  app.post(<span class="string">'/api/updateUser'</span>, Teacher.updateUser);</span><br><span class="line">  <span class="comment">// 获取试卷(分页、模糊查询)</span></span><br><span class="line">  app.get(<span class="string">'/api/mypapers'</span>, Teacher.getPapers);</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*----------------------学生用户----------------------*/</span></span><br><span class="line">  <span class="comment">// 学生注册</span></span><br><span class="line">  app.post(<span class="string">'/api/studentregister'</span>,Student.register);</span><br><span class="line">  <span class="comment">// 学生登录</span></span><br><span class="line">  app.post(<span class="string">'/api/studentlogin'</span>, Student.signup);</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我将每个路由的方法都是提取出去的，这样可以避免这个文件不会有太多的代码，可读性降低，将代码分离开来，也有助于维护</p><p><img src="https://i.imgur.com/19bvKRe.png" alt=""></p><p>在使用的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'/api/getexamlogs'</span>).then()... </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="数据库的相关操作"><a href="#数据库的相关操作" class="headerlink" title="数据库的相关操作"></a>数据库的相关操作</h4><p>我这次用mongodb，主要是因为可以用js来操作，对我来说比较简单，mysql我不会用。在实际开发过程中发现，考试系统各个表（集合）都是需要关联，mongodb这种非关系型数据库，做起来反而麻烦了不少。在此将一些数据库增删改查的方法回顾一下。</p><h5 id="初始化一条数据"><a href="#初始化一条数据" class="headerlink" title="初始化一条数据"></a>初始化一条数据</h5><blockquote><p>如果对mongodb，mongoose没有基础的了解，建议看一看<a href="https://www.villainhr.com/page/2016/05/11/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmongoose" target="_blank" rel="noopener">mongoose深入浅出</a> ，<a href="https://segmentfault.com/a/1190000014736907" target="_blank" rel="noopener">mongoose基础操作</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controllers/student.js</span></span><br><span class="line"><span class="keyword">const</span> Student = <span class="built_in">require</span>(<span class="string">'../model/student'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">    userId: <span class="number">12001</span>, <span class="comment">// 学号</span></span><br><span class="line">    userName: <span class="string">'张三'</span>, <span class="comment">// 用户名</span></span><br><span class="line">    passWord: <span class="string">'123321'</span>, <span class="comment">// 密码</span></span><br><span class="line">    grade: <span class="number">3</span>, <span class="comment">// 年级 1~6 分别代表一年级到六年级</span></span><br><span class="line">    class: 3, // 班级</span><br><span class="line">    exams:[&#123; <span class="comment">// 参加的考试</span></span><br><span class="line">      _paper:Schema.Types.ObjectId(<span class="string">"5a40a4ef485a584d44764ff1"</span>), <span class="comment">// 这个是_id，在mongodb自动生成的，从数据库复制过来，初始化一个学生，应该是没有参加考试的</span></span><br><span class="line">      score:<span class="number">100</span>,</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      answers: []</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 保存</span></span><br><span class="line">student.save(<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="用户注册，其实就是创建一条数据"><a href="#用户注册，其实就是创建一条数据" class="headerlink" title="用户注册，其实就是创建一条数据"></a>用户注册，其实就是创建一条数据</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userInfo = req.body.userInfo; <span class="comment">// req.body 获取post方式传递的参数</span></span><br><span class="line">  Student.findOne(userInfo,(err,doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      ...</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">         res.json(&#123;</span><br><span class="line">           status:<span class="string">'2'</span>,</span><br><span class="line">           msg: <span class="string">'用户已存在'</span></span><br><span class="line">         &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          userInfo.exams = [];</span><br><span class="line">          <span class="comment">// userInfo 是个对象，包含了用户相关的信息</span></span><br><span class="line">          Student.create(userInfo,(err1,doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             ...</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h5 id="获取考试记录-子文档数组分页模糊查询"><a href="#获取考试记录-子文档数组分页模糊查询" class="headerlink" title="获取考试记录,子文档数组分页模糊查询"></a>获取考试记录,子文档数组分页模糊查询</h5><p>如下图是我的<code>student</code>集合:</p><p><img src="https://i.imgur.com/sjKcFYU.png" alt=""><br>在该集合中，学生参加过的考试记录，存在<code>exams</code>数组中，当想实现分页查询几条数据的时候，需要用到<code>$slice</code></p><blockquote><p><code>$slice:[start,size]</code>  第一个参数表示，数组开始的下标，第二个表示截取的数量<br>在后台接收到前台传递的<code>pageSize</code>和<code>pageNumber</code>时，需要计算出当前需要截取的下标，即<code>let  skip = (pageNumber-1)*pageSize</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">exports.getExamLogs = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">  <span class="keyword">let</span>  pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>));</span><br><span class="line">  <span class="keyword">let</span>  pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>));</span><br><span class="line">  <span class="keyword">let</span>  skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span>  reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  Student.findOne(&#123;<span class="string">"userName"</span>:userName&#125;,&#123;<span class="string">"exams"</span>:&#123;<span class="attr">$slice</span>:[skip,pageSize]&#125;&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'exams._paper'</span>,<span class="attr">match</span>:&#123;<span class="attr">name</span>: reg&#125;&#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">          res.json(&#123;</span><br><span class="line">            status: <span class="string">'0'</span>,</span><br><span class="line">            msg:<span class="string">'success'</span>,</span><br><span class="line">            result:doc,</span><br><span class="line">            count: doc.exams.length?doc.exams.length:<span class="number">0</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="另一种分页模糊查询–在文档之间（document）"><a href="#另一种分页模糊查询–在文档之间（document）" class="headerlink" title="另一种分页模糊查询–在文档之间（document）"></a>另一种分页模糊查询–在文档之间（document）</h5><p><img src="https://i.imgur.com/je9ierB.png" alt=""></p><blockquote><p>每个试卷都是独立的文档，通过他们的名称<code>name</code>实现模糊查询</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取考试信息</span></span><br><span class="line">exports.getExams = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">  <span class="keyword">let</span>  pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>));</span><br><span class="line">  <span class="keyword">let</span>  pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>));</span><br><span class="line">  <span class="keyword">let</span> skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  Student.findOne(&#123;<span class="string">"userName"</span>:userName&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        status: <span class="string">'1'</span>,</span><br><span class="line">        msg: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">      <span class="comment">// 关键在这里</span></span><br><span class="line">        Paper.find(&#123;<span class="attr">startTime</span>:&#123;<span class="attr">$exists</span>:<span class="literal">true</span>&#125;,<span class="attr">name</span>:reg&#125;).skip(skip).limit(pageSize).populate(&#123;<span class="attr">path</span>:<span class="string">'_questions'</span>&#125;).exec(<span class="function">(<span class="params">err1,doc1</span>)=&gt;</span>&#123;</span><br><span class="line">        ....  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="还有一种模糊分页查询–查询关联文档再模糊分页查询"><a href="#还有一种模糊分页查询–查询关联文档再模糊分页查询" class="headerlink" title="还有一种模糊分页查询–查询关联文档再模糊分页查询"></a>还有一种模糊分页查询–查询关联文档再模糊分页查询</h5><p><img src="https://i.imgur.com/T5uaimo.png" alt=""></p><blockquote><p>先通过<code>populate</code>查询除关联文档，在模糊分页查询</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">exports.getPapers = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(req.session.userName);</span></span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>),</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">    pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>)),</span><br><span class="line">    pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>)),</span><br><span class="line">    userName = req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    name: reg</span><br><span class="line">  &#125;;</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'_papers'</span>,<span class="attr">match</span>:&#123;<span class="attr">name</span>: reg&#125;,<span class="attr">options</span>:&#123;<span class="attr">skip</span>:skip,<span class="attr">limit</span>:pageSize&#125;&#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</span><br><span class="line">      ....</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="populate"><a href="#populate" class="headerlink" title="populate"></a>populate</h5><p>mongodb本来就是非关系型的数据库，但是有很多时候不同的集合直接是需要关联的，这是就用到了mongoose提供的<code>populate</code></p><p>直接看图，不同集合直接的关联，用的就是<code>_id</code>,比如下图中，学生参加的考试，关联了试卷，试卷里面又关联了题目</p><p><img src="https://i.imgur.com/n4IthLV.png" alt=""></p><p>怎么查询呢：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.findOne(&#123;&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'exams._paper'</span>&#125;).exec(....)</span><br></pre></td></tr></table></figure><p>更多的可以看看我项目中的实际代码都在<code>server/controllers</code>下面</p><h5 id="关联集合的新增"><a href="#关联集合的新增" class="headerlink" title="关联集合的新增"></a>关联集合的新增</h5><p>在系统中，教师可以增加试卷，这个时候我就不知道该怎么保存前台传过来的数据。数据中既有试卷的信息，也有很多题目。题目都属于该试卷，改试卷又属于当前登录系统的老师（即创建试卷的老师）。<br>怎么才能让试卷、教师、问题关联起来啊，ref存的是_id,然而这些新增的数据，是保存之后才有_id的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">exports.savePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> paperForm = req.body.paperForm;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="keyword">if</span>(paperForm == &#123;&#125;)&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      status:<span class="string">'5'</span>,</span><br><span class="line">      msg: <span class="string">'数据不能为空'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第一步查找当前登录的教师</span></span><br><span class="line">  Teacher.findOne(&#123;<span class="string">"userName"</span>: userName&#125;, (err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        <span class="keyword">let</span> paperData = &#123;</span><br><span class="line">          name:paperForm.name,</span><br><span class="line">          totalPoints:paperForm.totalPoints,</span><br><span class="line">          time:paperForm.time,</span><br><span class="line">          _teacher: doc._id, <span class="comment">// 这里就可以拿到教师的_id</span></span><br><span class="line">          _questions: [],</span><br><span class="line">          examnum:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二步创建试卷</span></span><br><span class="line">        Paper.create(paperData,<span class="function"><span class="keyword">function</span> (<span class="params">err1,doc1</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc1) &#123;</span><br><span class="line">              doc._papers.push(doc1._id); <span class="comment">// 教师中添加该试卷的_id</span></span><br><span class="line">              doc.save(); <span class="comment">// 很重要 不save则没有数据</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">// 第三步 创建问题</span></span><br><span class="line">              paperForm._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item._papers = [];</span><br><span class="line">                item._papers.push(doc1._id); <span class="comment">// 试卷中存入试卷的_id，因为此时已经创建了试卷，所以可以拿到_id</span></span><br><span class="line">                item._teacher = doc._id;  <span class="comment">// 试卷中存入教师的_id</span></span><br><span class="line">              &#125;)</span><br><span class="line">              Question.create(paperForm._questions,<span class="function"><span class="keyword">function</span> (<span class="params">err2,doc2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err2) &#123;</span><br><span class="line">                  ...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (doc2) &#123;</span><br><span class="line">                    doc2.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                      doc1._questions.push(item._id); <span class="comment">// 当问题创建成功，则在试卷中存入问题的_id</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    doc1.save();</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                      status:<span class="string">'0'</span>,</span><br><span class="line">                      msg: <span class="string">'success'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ...</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="关联集合的删除—删除试卷"><a href="#关联集合的删除—删除试卷" class="headerlink" title="关联集合的删除—删除试卷"></a>关联集合的删除—删除试卷</h5><blockquote><p>删除某一个试卷，既要删除教师中对应的试卷_id,也要删除问题中对应的试卷_id<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除试卷</span></span><br><span class="line">exports.deletePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="comment">// 第一步 删除教师中的_id _papers是一个数组，所以用到了`$pull`</span></span><br><span class="line">  Teacher.update(&#123;<span class="string">"userName"</span>:userName&#125;,&#123;<span class="string">'$pull'</span>:&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;&#125;, (err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        status:<span class="string">'1'</span>,</span><br><span class="line">        msg: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        <span class="comment">// 第二步  删除试卷 即 移除一个文档</span></span><br><span class="line">        Paper.remove(&#123;<span class="string">"_id"</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err1,doc1</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            res.json(&#123;</span><br><span class="line">              status:<span class="string">'1'</span>,</span><br><span class="line">              msg: err1.message</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc1) &#123;</span><br><span class="line">            <span class="comment">// 第三步  updateMany删除多个问题中的_id 这里并没有删除试卷中包含的问题，是为了以后题库做准备</span></span><br><span class="line">              Question.updateMany(&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;,&#123;<span class="string">'$pull'</span>:&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err2,doc2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err2)&#123;</span><br><span class="line">                  ...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (doc2)&#123;</span><br><span class="line">                    ...</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="关联集合多条数据的更新–修改试卷"><a href="#关联集合多条数据的更新–修改试卷" class="headerlink" title="关联集合多条数据的更新–修改试卷"></a>关联集合多条数据的更新–修改试卷</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改试卷-修改试卷</span></span><br><span class="line">exports.updatePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> params = req.body.params;</span><br><span class="line">  <span class="keyword">let</span> paperParams = &#123; <span class="comment">// 试卷需要更新的字段</span></span><br><span class="line">    name: params.name,</span><br><span class="line">    totalPoints: params.totalPoints,</span><br><span class="line">    time: params.time</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> updateQuestion = []; <span class="comment">// 需要更新的题目</span></span><br><span class="line">  <span class="keyword">let</span> addQuestion = []; <span class="comment">// 需要新增的题目</span></span><br><span class="line">  params._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item._id) &#123;  <span class="comment">// 通过判断是否有_id区分已有的或者是新增的</span></span><br><span class="line">      updateQuestion.push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      addQuestion.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        Paper.findOneAndUpdate(&#123;<span class="string">"_id"</span>:params._id&#125;,paperParams,(err1,doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1)&#123;</span><br><span class="line">              updateQuestion.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123; <span class="comment">// 循环更新题目，好像很傻的方法，可能有更好的办法</span></span><br><span class="line">                Question.update(&#123;<span class="string">"_id"</span>:item._id&#125;,item,(err2,doc2)=&gt;&#123;</span><br><span class="line">                  <span class="keyword">if</span>(err2)&#123;</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                      status:<span class="string">'1'</span>,</span><br><span class="line">                      msg: err2.message</span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(doc2)&#123;</span><br><span class="line">                      <span class="keyword">if</span>(index == (updateQuestion.length<span class="number">-1</span>))&#123;</span><br><span class="line">                        <span class="keyword">if</span> (addQuestion.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                          addQuestion.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                            item._papers = [];</span><br><span class="line">                            item._papers.push(doc1._id);</span><br><span class="line">                            item._teacher = doc._id;</span><br><span class="line">                          &#125;)</span><br><span class="line">                          <span class="comment">// 创建新增题目</span></span><br><span class="line">                          Question.create(addQuestion,(err3,doc3) =&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span>(err3) &#123;</span><br><span class="line">                             ...</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              <span class="keyword">if</span>(doc3) &#123;</span><br><span class="line">                                doc3.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                                  doc1._questions.push(item._id); <span class="comment">// 还要将新增的题目关联到试卷当中</span></span><br><span class="line">                                &#125;)</span><br><span class="line"></span><br><span class="line">                                doc1.save(); <span class="comment">// 很重要 不save则没有数据</span></span><br><span class="line">                                res.json(&#123;</span><br><span class="line">                                  status:<span class="string">'0'</span>,</span><br><span class="line">                                  msg: <span class="string">'success'</span></span><br><span class="line">                                &#125;)</span><br><span class="line">             <span class="comment">// .......................判断太长省略........................</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="更新子文档数组–阅卷打分"><a href="#更新子文档数组–阅卷打分" class="headerlink" title="更新子文档数组–阅卷打分"></a>更新子文档数组–阅卷打分</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打分提交</span></span><br><span class="line">exports.submitScore = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'userName'</span>),</span><br><span class="line">    date = req.param(<span class="string">'date'</span>),</span><br><span class="line">    score = req.param(<span class="string">'score'</span>) - <span class="number">0</span>,</span><br><span class="line">    userName = req.session.userName;</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;,(err,doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">        Student.update(&#123;<span class="string">"userName"</span>:name,<span class="string">"exams.date"</span>:date&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">"exams.$.score"</span>:score,<span class="string">"exams.$.isSure"</span>:<span class="literal">true</span>&#125;&#125;,(err1, doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//student.js</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mdHash = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// hash 的定义要写在这个方法内，不然会报错Digest already called ****</span></span><br><span class="line">  <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">  <span class="keyword">return</span> hash.update(data).digest(<span class="string">'hex'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userInfo = req.body.userInfo;</span><br><span class="line">  <span class="comment">//获取到前台传过来的密码，先加密再存储</span></span><br><span class="line">  userInfo.passWord = mdHash(userInfo.passWord);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      这是我毕业项目，从0到1，前后台独立开发完成。功能不多，在此记录,温故而知新！
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="elementUI" scheme="http://yoursite.com/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>win10下安装配置mongodb</title>
    <link href="http://yoursite.com/2018/05/05/win-mongodb/"/>
    <id>http://yoursite.com/2018/05/05/win-mongodb/</id>
    <published>2018-05-05T06:59:28.000Z</published>
    <updated>2018-05-05T07:01:56.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载Mongodb"><a href="#下载Mongodb" class="headerlink" title="下载Mongodb"></a>下载Mongodb</h2><p><a href="http://dl.mongodb.org/dl/win32/x86_64" target="_blank" rel="noopener">各个版本下载地址</a><br><img src="https://i.imgur.com/Oh0ZwCV.png" alt=""></p><h2 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h2><p>一路下一步就行了<br><img src="https://i.imgur.com/evefSbo.png" alt=""></p><h3 id="配置Mongodb"><a href="#配置Mongodb" class="headerlink" title="配置Mongodb"></a>配置Mongodb</h3><ol><li><p>在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data</p></li><li><p>在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log</p></li><li><p>在c:\MongoDB（可随意起）下面建一个etc(随意起，放配置文件)文件夹 c:\MongoDB\etc ,在里面建一个文件mongo.conf</p></li></ol><p>打开mongo.conf文件，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#数据库路径</span><br><span class="line">dbpath=c:\MongoDB\data\</span><br><span class="line">#日志输出文件路径</span><br><span class="line">logpath=c:\MongoDB\logs\mongodb.log</span><br><span class="line">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class="line">logappend=true</span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal=true</span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=false</span><br><span class="line">#端口号 默认为27017</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure></p><h3 id="运行mongodb"><a href="#运行mongodb" class="headerlink" title="运行mongodb"></a>运行mongodb</h3><p><img src="https://i.imgur.com/sRNRLpT.png" alt=""></p><h3 id="配置mongodb服务"><a href="#配置mongodb服务" class="headerlink" title="配置mongodb服务"></a>配置mongodb服务</h3><p><code>mongod --config c:\MongoDB\etc\mongo.conf --install --serviceName &quot;MongoDB&quot;</code></p><p><img src="https://i.imgur.com/kFFf50n.png" alt=""></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="https://i.imgur.com/JlL9IiO.png" alt=""></p><h2 id="下载安装Robo-3T"><a href="#下载安装Robo-3T" class="headerlink" title="下载安装Robo 3T"></a>下载安装Robo 3T</h2><p>下载一个图形化界面工具<br><img src="https://i.imgur.com/EST4sUn.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      win10下安装配置mongodb
    
    </summary>
    
      <category term="mongodb" scheme="http://yoursite.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>深入理解浮动</title>
    <link href="http://yoursite.com/2018/05/05/float/"/>
    <id>http://yoursite.com/2018/05/05/float/</id>
    <published>2018-05-05T03:13:47.000Z</published>
    <updated>2018-05-05T03:16:17.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规流"><a href="#常规流" class="headerlink" title="常规流"></a>常规流</h2><ul><li>常规流（文档流）与包含块<blockquote><p>常规流就是页面元素（dom节点）从上往下，从左往右的排列</p></blockquote></li></ul><blockquote><p>包含块：一个元素的包含块是离它最近的<strong>块级祖先</strong></p></blockquote><ul><li>脱离常规流<blockquote><p>定位<code>position:absolute/fixed</code>,脱离常规流的元素，其前后的元素会当它不存在</p></blockquote></li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><blockquote><p>《CSS权威指南》中说，浮动元素同时处于（常规）流内和流外</p></blockquote><ul><li>浮动元素不会影响块级元素的布局（块级元素会当它不存在）–流外</li><li>浮动元素会影响行内元素的布局 – 流内<ul><li>间接影响块级元素布局</li></ul></li></ul><p>元素浮动之后会变成一个块框，相当于一个div</p><blockquote><p>浮动和定位一起用，浮动会失效 （浮动和相对定位可以一起用，先浮动，再相对于浮动之后的位置进行定位）</p></blockquote><h3 id="浮动元素的摆放方式"><a href="#浮动元素的摆放方式" class="headerlink" title="浮动元素的摆放方式"></a>浮动元素的摆放方式</h3><ul><li>尽量靠上</li><li>尽量靠左</li><li>尽量挨着，margin外边缘挨着</li><li>不能超出包含块（除非元素本身已经比包含块更宽）</li><li>不能超出所在行的最高点</li><li>不能超过它前面的的浮动元素的最高点</li><li>行内元素绕着浮动元素摆放<ul><li>行内元素会出现在左浮动元素的右边及右浮动元素的左边</li><li>左浮动元素的左边及右浮动元素的右边是不会摆放行内元素的</li></ul></li></ul><h3 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h3><p><img src="https://i.imgur.com/XBozugz.png" alt=""><br><img src="https://i.imgur.com/HsgBADf.png" alt=""><br>下图中最长的浮动块，长度太长，所以它没法挨着第二个浮动元素的左边<br><img src="https://i.imgur.com/XSes8Xn.png" alt=""><br>下图中虽然第二个后面可以放下第四个，但是它并不能浮动到那里，它也不能浮动到第一个的下面<br><img src="https://i.imgur.com/U4rQkf7.png" alt=""></p><p><img src="https://i.imgur.com/WAnun0V.png" alt=""></p><p>行内元素会出现在左浮动元素的右边及右浮动元素的左边，div3的左边是没有文字的<br><img src="https://i.imgur.com/O4ceub3.png" alt=""><br>不能超出所在行的最高点（图中的span虽然浮动了，它还是在它所在行，不会超出）<br><img src="https://i.imgur.com/fgNLBX6.png" alt=""><br>浮动元素不会影响块级元素的布局（块级元素会当它不存在）–流外<br><img src="https://i.imgur.com/Cr3YAal.png" alt=""></p><h3 id="浮动清除（clear-常规流中的块级元素）"><a href="#浮动清除（clear-常规流中的块级元素）" class="headerlink" title="浮动清除（clear,常规流中的块级元素）"></a>浮动清除（clear,常规流中的块级元素）</h3><blockquote><p><code>clear: none | left | right | both;</code></p></blockquote><blockquote><p>浮动清除是指块框下移，直到某一边（或两边）没有浮动元素为止</p></blockquote><p><img src="https://i.imgur.com/LGLDtS2.png" alt=""><br>清除浮动</p><p>清除左浮动，会按图中箭头的方向从右往左看，将div2向下移动，直到div2的左边没有左浮动元素（清除右浮动与之相对）<br><img src="https://i.imgur.com/hh6tHkQ.png" alt=""></p><h3 id="闭合浮动"><a href="#闭合浮动" class="headerlink" title="闭合浮动"></a>闭合浮动</h3><p><img src="https://i.imgur.com/0EtOxUI.png" alt=""></p><p>给父级div加一个<code>overflow:hidden</code><br><img src="https://i.imgur.com/PxERVsQ.png" alt=""></p><ul><li>可以添加一个行内元素，让它的宽度为100%，它就会往下移，这样就撑开了父级div</li><li>父级div添加<code>overflow:hidden</code></li><li>伪元素 clear（clearfix）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">"."</span>;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line"><span class="attribute">visibility</span>:hidden</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      css浮动到底是怎么回事
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>react-native之navigation</title>
    <link href="http://yoursite.com/2018/04/04/react-native/"/>
    <id>http://yoursite.com/2018/04/04/react-native/</id>
    <published>2018-04-04T09:03:27.000Z</published>
    <updated>2018-05-10T08:49:57.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先看项目目录"><a href="#先看项目目录" class="headerlink" title="先看项目目录"></a>先看项目目录</h2><p>这个文件目录除了<code>src</code> 其他的都是通过<code>react-native init my_app</code>自动生成的。</p><blockquote><p>自所以要贴目录，是我发现我在网上查找博客文章的时候，很多都没有目录，上来就是代码，一脸懵逼进来一脸懵逼出去，可能是自己太菜了。</p></blockquote><p><img src="https://i.imgur.com/mRe9XyT.png" alt=""></p><h2 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react-navigation"></a>react-navigation</h2><blockquote><p>译注：从0.44版本开始，Navigator被从react native的核心组件库中剥离到了一个名为react-native-deprecated-custom-components的单独模块中。如果你需要继续使用Navigator，则需要先npm i facebookarchive/react-native-custom-components安装，然后从这个模块中import，即import { Navigator } from ‘react-native-deprecated-custom-components’.——官网</p></blockquote><h3 id="安装react-navigation"><a href="#安装react-navigation" class="headerlink" title="安装react-navigation"></a>安装react-navigation</h3><p><code>npm i react-navigation --save</code></p><p><code>yarn add react-navigation</code></p><p>这个库包含了三个组件：</p><ul><li>StackNavigator：用来跳转页面和传递参数</li><li>TabNavigator：类似底部导航栏，用来在同一屏幕下切换不同界面</li><li>DrawerNavigator：侧滑菜单导航栏，用于轻松设置带抽屉导航的屏幕</li></ul><blockquote><p>该文只说前两个怎么用，就是入门，至于有很多配置项的东西，可以查官方文档。这也是我的学习方式，先用了再说，先了解一下这个到底是长什么样的，至于它化不化妆慢慢再看。<br><code>DrawerNavigator</code>希望日后能补上。</p></blockquote><h3 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h3><p>先安照第一张文件目录图建几个文件，文件名随便。</p><ul><li>index.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Image</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StackNavigator,</span><br><span class="line">  TabNavigator</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> First <span class="keyword">from</span> <span class="string">'./first.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Second <span class="keyword">from</span> <span class="string">'./second.js'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navigation</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'Navigation'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;This is the home screen <span class="keyword">of</span> the app&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; navigate('First',&#123;user:'参数111'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我跳转"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">     )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const MyScreens = StackNavigator(&#123;</span></span><br><span class="line"><span class="regexp">  Home: &#123; screen: Navigation &#125;,</span></span><br><span class="line"><span class="regexp">  First: &#123;screen: First&#125;,</span></span><br><span class="line"><span class="regexp">  Second: &#123;screen: Second&#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">    container:&#123;</span></span><br><span class="line"><span class="regexp">        flex: 1,</span></span><br><span class="line"><span class="regexp">        backgroundColor:'#fff'</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    icon: &#123;</span></span><br><span class="line"><span class="regexp">        height: 22,</span></span><br><span class="line"><span class="regexp">        width: 22,</span></span><br><span class="line"><span class="regexp">        resizeMode: 'contain'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">export default MyScreens;</span></span><br></pre></td></tr></table></figure><ul><li>first.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line"> title: <span class="string">`<span class="subst">$&#123;navigation.state.params.user&#125;</span>`</span>,</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第一页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="keyword">const</span> &#123;params&#125; = <span class="keyword">this</span>.props.navigation.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是first页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &lt;Text&gt;上一个页面传的参数&#123;params.user&#125;&lt;/</span>Text&gt;</span><br><span class="line">     &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; navigate(<span class="string">'Second'</span>,&#123;<span class="attr">papa</span>:<span class="string">'参数222'</span>&#125;)&#125;</span><br><span class="line">          title=<span class="string">"点击我跳转"</span></span><br><span class="line">        /&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>second.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line"> title: <span class="string">`<span class="subst">$&#123;navigation.state.params.papa&#125;</span>`</span>,</span><br><span class="line">&#125;);</span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第二页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;goBack&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="keyword">const</span> &#123;params&#125; = <span class="keyword">this</span>.props.navigation.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是second页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &lt;Text&gt;上一个页面传的参数&#123;params.papa&#125;&lt;/</span>Text&gt;</span><br><span class="line">     &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; goBack()&#125;</span><br><span class="line">          title=<span class="string">"点击我回跳"</span></span><br><span class="line">        /&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://i.imgur.com/R35h4Ke.gif" alt=""></p><p>这就实现了页面之间的跳转，和传参。</p><p><code>onPress={() =&gt; navigate(&#39;First&#39;,{user:&#39;参数111&#39;})}</code>,第一个参数表示跳转的页面，第二参数是传递的参数。跳转页面必须是已经注册的页面。</p><h3 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h3><ul><li>index.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button,</span><br><span class="line">  StyleSheet,</span><br><span class="line">  Image</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StackNavigator,</span><br><span class="line">  TabNavigator</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> First <span class="keyword">from</span> <span class="string">'./first.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Second <span class="keyword">from</span> <span class="string">'./second.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Other <span class="keyword">from</span> <span class="string">'./other.js'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Navigation</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"><span class="keyword">super</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'Navigation'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;This is the home screen <span class="keyword">of</span> the app&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; navigate('First',&#123;user:'参数111'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我跳转"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onPress=&#123;() =&gt; navigate(<span class="string">'Other'</span>)&#125;</span><br><span class="line">          title=<span class="string">"点击我跳转到其他页面"</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">     )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const MainScreenNavigator = TabNavigator(&#123;</span></span><br><span class="line"><span class="regexp">    Home: &#123;</span></span><br><span class="line"><span class="regexp">        screen: Navigation,</span></span><br><span class="line"><span class="regexp">        navigationOptions: &#123;</span></span><br><span class="line"><span class="regexp">          tabBarLabel: '首页',</span></span><br><span class="line"><span class="regexp">          tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span></span><br><span class="line"><span class="regexp">              &lt;Image</span></span><br><span class="line"><span class="regexp">                  source=&#123;require('./</span>home.png<span class="string">')&#125;</span></span><br><span class="line"><span class="string">                  style=&#123;[&#123;tintColor: tintColor&#125;,styles.icon]&#125;</span></span><br><span class="line"><span class="string">              /&gt;</span></span><br><span class="line"><span class="string">          ),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    First: &#123;</span></span><br><span class="line"><span class="string">        screen: First,</span></span><br><span class="line"><span class="string">        navigationOptions: &#123;</span></span><br><span class="line"><span class="string">          tabBarLabel: '</span>第一页<span class="string">',</span></span><br><span class="line"><span class="string">          tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span></span><br><span class="line"><span class="string">              &lt;Image</span></span><br><span class="line"><span class="string">                  source=&#123;require('</span>./home.png<span class="string">')&#125;</span></span><br><span class="line"><span class="string">                  style=&#123;[&#123;tintColor: tintColor&#125;,styles.icon]&#125;</span></span><br><span class="line"><span class="string">              /&gt;</span></span><br><span class="line"><span class="string">          ),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    Second: &#123;</span></span><br><span class="line"><span class="string">        screen: Second,</span></span><br><span class="line"><span class="string">        navigationOptions: &#123;</span></span><br><span class="line"><span class="string">          tabBarLabel: '</span>第二页<span class="string">',</span></span><br><span class="line"><span class="string">          tabBarIcon: (&#123;tintColor&#125;) =&gt; (</span></span><br><span class="line"><span class="string">              &lt;Image</span></span><br><span class="line"><span class="string">                  source=&#123;require('</span>./home.png<span class="string">')&#125;</span></span><br><span class="line"><span class="string">                  style=&#123;[&#123;tintColor: tintColor&#125;,styles.icon]&#125;</span></span><br><span class="line"><span class="string">              /&gt;</span></span><br><span class="line"><span class="string">          ),</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">    animationEnabled: false, // 切换页面时不显示动画</span></span><br><span class="line"><span class="string">    tabBarPosition: '</span>bottom<span class="string">', // 显示在底端，android 默认是显示在页面顶端的</span></span><br><span class="line"><span class="string">    swipeEnabled: false, // 禁止左右滑动</span></span><br><span class="line"><span class="string">    // backBehavior: '</span>none<span class="string">', // 按 back 键是否跳转到第一个 Tab， none 为不跳转</span></span><br><span class="line"><span class="string">    tabBarOptions: &#123;</span></span><br><span class="line">        activeTintColor: '#008AC9', // 文字和图片选中颜色</span><br><span class="line">        inactiveTintColor: <span class="string">'#999'</span>, <span class="comment">// 文字和图片默认颜色</span></span><br><span class="line">        showIcon: <span class="literal">true</span>, <span class="comment">// android 默认不显示 icon, 需要设置为 true 才会显示</span></span><br><span class="line">        indicatorStyle: &#123;<span class="attr">height</span>: <span class="number">0</span>&#125;, <span class="comment">// android 中TabBar下面会显示一条线，高度设为 0 后就不显示线了</span></span><br><span class="line">        style: &#123;</span><br><span class="line">            backgroundColor: <span class="string">'#000'</span>, <span class="comment">// TabBar 背景色</span></span><br><span class="line">        &#125;,</span><br><span class="line">        labelStyle: &#123;</span><br><span class="line">            fontSize: <span class="number">12</span>, <span class="comment">// 文字大小</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> MyScreens = StackNavigator(&#123;</span><br><span class="line">  Home: &#123; <span class="attr">screen</span>: MainScreenNavigator &#125;,</span><br><span class="line">  <span class="comment">// First: &#123;screen: First&#125;,</span></span><br><span class="line">  <span class="comment">// Second: &#123;screen: Second&#125;</span></span><br><span class="line">  Other: &#123;<span class="attr">screen</span>: Other&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    container:&#123;</span><br><span class="line">        flex: <span class="number">1</span>,</span><br><span class="line">        backgroundColor:<span class="string">'#fff'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    icon: &#123;</span><br><span class="line">        height: <span class="number">22</span>,</span><br><span class="line">        width: <span class="number">22</span>,</span><br><span class="line">        resizeMode: <span class="string">'contain'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyScreens; <span class="comment">// 这里导出的是MyScreens,而不是Navigation组件</span></span><br></pre></td></tr></table></figure><ul><li>first.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">// static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123;</span></span><br><span class="line"> <span class="comment">//    title: `$&#123;navigation.state.params.user&#125;`,</span></span><br><span class="line"> <span class="comment">//  &#125;);</span></span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第一页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;navigate&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="comment">// const &#123;params&#125; = this.props.navigation.state;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是first页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>上一个页面传的参数&#123;params.user&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">     &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; navigate('Second',&#123;papa:'参数222'&#125;)&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我跳转"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>second.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Text,</span><br><span class="line">  View,</span><br><span class="line">  Button</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">First</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">// static navigationOptions = (&#123; navigation &#125;) =&gt; (&#123;</span></span><br><span class="line"> <span class="comment">//    title: `$&#123;navigation.state.params.papa&#125;`,</span></span><br><span class="line"> <span class="comment">//  &#125;);</span></span><br><span class="line"> <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="string">'第二页'</span>,</span><br><span class="line">    <span class="comment">// header: null, // 隐藏顶部导航</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;goBack&#125; = <span class="keyword">this</span>.props.navigation;</span><br><span class="line">  <span class="comment">// const &#123;params&#125; = this.props.navigation.state;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">     &lt;View&gt;</span><br><span class="line">     &lt;Text&gt;我是second页面&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">     &#123;/</span>*<span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>上一个页面传的参数&#123;params.papa&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">     &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;() =&gt; goBack()&#125;</span></span><br><span class="line"><span class="regexp">          title="点击我回跳"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">     &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://i.imgur.com/YqJc1Ya.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      react-native之navigation
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="reactNative" scheme="http://yoursite.com/tags/reactNative/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript——Promise</title>
    <link href="http://yoursite.com/2018/03/08/promise/"/>
    <id>http://yoursite.com/2018/03/08/promise/</id>
    <published>2018-03-08T06:08:24.000Z</published>
    <updated>2018-05-10T08:49:45.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h2><blockquote><p>The Promise object is used for asynchronous computations.<br>Promise对象用于异步计算.<br>A Promise represents a value which may be available now,or in the future,or never.<br>一个Promise表示一个现在、将来或永不可能用的值.</p></blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p><h3 id="new一个promise"><a href="#new一个promise" class="headerlink" title="new一个promise"></a>new一个promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line">.....</span><br><span class="line">  resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line">  reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功，下一步</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 失败，做相应处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Promise</code>构造函数可以接受两个参数，<code>resolve</code>和<code>reject</code>。这两个函数是，JavaScript引擎自带的，不用自己定义他们。</p><p><code>Promise</code> 有三个状态:</p><ol><li><code>pending</code> [待定] 初始状态</li><li><code>fulfilled</code> [实现]操作成功</li><li><code>rejected</code> [被否决]操作失败</li></ol><p><code>resolve</code>的作用就是将<code>pending</code>状态 ===&gt; <code>fulfilled</code>，<code>reject</code>的作用是讲<code>pending</code>状态 ===&gt; <code>rejected</code></p><blockquote><p><code>Promise</code>状态发送改变，就会触发<code>.then()</code>里面的响应函数处理后续步骤。<br><code>Promise</code>状态一经改变，就不会再变了。</p></blockquote><h2 id="第一个实例"><a href="#第一个实例" class="headerlink" title="第一个实例"></a>第一个实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value + <span class="string">'world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HOJQmbs.png" alt=""><br><img src="https://i.imgur.com/V4rR3Fs.png" alt=""></p><p>先输出1，间隔两秒输出了helloworld。</p><blockquote><p><code>.then()</code>中的<code>value</code>正是<code>resolve()</code>中的参数。</p></blockquote><h2 id="在-then-中返回一个Promise"><a href="#在-then-中返回一个Promise" class="headerlink" title="在.then()中返回一个Promise"></a>在<code>.then()</code>中返回一个Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'2'</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'3'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>间隔两秒，依次输出1 2 3<br><img src="https://i.imgur.com/hfUIOdS.png" alt=""></p><h2 id="假如一个Promise-已经完成了，再-then-会怎样？？"><a href="#假如一个Promise-已经完成了，再-then-会怎样？？" class="headerlink" title="假如一个Promise 已经完成了，再.then()会怎样？？"></a>假如一个Promise 已经完成了，再.then()会怎样？？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'go'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the promise fulfilled'</span>);</span><br><span class="line">    resolve(<span class="string">'hahahahha'</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/QqQAba9.png" alt=""></p><blockquote><p>我们在任何一个地方，生成了一个<code>Promise</code>队列之后，我们可以声明一个变量，将它传递到其他地方，如果我们的操作是很明显的一个队列的状态(先进先出)，就可以在它后面追加任意多的<code>.then()</code>，不管他前面<code>Promise</code>状态是完成了还是没完成，队列都会安装固定的顺序去执行如果已完成，后面追加的<code>.then()</code>也会得到前面<code>Promise</code>返回的值。</p></blockquote><h2 id="假如在-then-的函数里面不返回新的Promise，会怎样？？"><a href="#假如在-then-的函数里面不返回新的Promise，会怎样？？" class="headerlink" title="假如在.then()的函数里面不返回新的Promise，会怎样？？"></a>假如在.then()的函数里面不返回新的Promise，会怎样？？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'everyone'</span>);</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 立即执行函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">        resolve(<span class="string">'hahah'</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value + <span class="string">'111111111'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/T7IP4ZL.png" alt=""></p><blockquote><p><code>.then()</code>接受两个函数作为参数，分别代表<code>fulfilled</code>和<code>rejected</code>. <code>.then()</code>返回一个新的<code>Promise</code>实例，所以它可以链式调用状态响应函数可以返回新的<code>Promise</code>，或其他值如果返回新的<code>Promise</code>，那么下一级<code>.then()</code>会在新<code>Promise</code>状态改变之后执行,如果返回其他任何值，则会立刻执行下一级<code>.then()</code></p></blockquote><h2 id="then-里面有-then-的情况"><a href="#then-里面有-then-的情况" class="headerlink" title=".then()里面有.then()的情况"></a>.then()里面有.then()的情况</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1-1'</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="number">110</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1-2'</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Step 1-3'</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 110</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Step 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/kAwb2RI.png" alt=""></p><blockquote><p>因为<code>.then()</code>返回的还是<code>Promise</code>实例，所以会等到里面的<code>.then()</code>执行完，再执行外面的。</p></blockquote><h2 id="四种情形"><a href="#四种情形" class="headerlink" title="四种情形"></a>四种情形</h2><h3 id="第一种-返回一个promise实例"><a href="#第一种-返回一个promise实例" class="headerlink" title="第一种 返回一个promise实例"></a>第一种 返回一个promise实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> doSomethingElse();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>假定doSomethingElse返回一个promise实例;图中横向代表执行先后顺序</p></blockquote><p><img src="https://i.imgur.com/umARD97.png" alt=""></p><h3 id="第二种-没有返回"><a href="#第二种-没有返回" class="headerlink" title="第二种 没有返回"></a>第二种 没有返回</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  doSomethingElse();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/y5UQu8O.png" alt=""></p><blockquote><p>第一个<code>.then()</code>没有return，虽然<code>doSomethingElse()</code>返回了一个<code>Promise</code>实例，但是这个<code>Promise</code>实例并没有返回给第一个<code>.then()</code>的响应函数，所以只能看作<code>doSomethingElse()</code>返回了一个<code>undefined</code>。</p></blockquote><h3 id="第三种-直接传入了一个promise实例"><a href="#第三种-直接传入了一个promise实例" class="headerlink" title="第三种 直接传入了一个promise实例"></a>第三种 直接传入了一个promise实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse());</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/IiO1XAP.png" alt=""></p><blockquote><p>在第一个<code>.then()</code>传入了<code>doSomethingElse()</code>，也就是传入了一个<code>Promise</code>实例<br>在这种情况下，<code>doSomething</code>与<code>doSomethingElse</code>的执行时间是几乎一致的，因为<code>doSomethingElse</code>返回的是一个<code>Promise</code>实例，而不是一个函数，在<code>Promise</code>规范的定义当中，这个<code>.then()</code>会被忽略掉，所以它的完成时间是无关紧要的.</p></blockquote><h3 id="第四种-传入一个函数"><a href="#第四种-传入一个函数" class="headerlink" title="第四种 传入一个函数"></a>第四种 传入一个函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething().then(doSomethingElse);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/FO98BHf.png" alt=""></p><blockquote><p><code>.then()</code>接受两个参数，所以<code>doSomethingElse</code>则作为第一个<code>resolve</code>参数,并且<code>doSomethingElse</code>返回一个<code>Promise</code>实例</p></blockquote><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="catch捕获异常"><a href="#catch捕获异常" class="headerlink" title="catch捕获异常"></a><code>catch</code>捕获异常</h3><blockquote><p><code>Promise</code>会自动捕获内部异常，并交给<code>rejected</code>响应函数处理。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'err'</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success'</span> + value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span> + value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>catch</code>也是返回一个Promise实例</p></blockquote><p><img src="https://i.imgur.com/CsMkg1n.png" alt=""></p><h3 id="reject返回异常"><a href="#reject返回异常" class="headerlink" title="reject返回异常"></a><code>reject</code>返回异常</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">'bye'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success:'</span> + value);</span><br><span class="line">&#125;, value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Err:'</span>+ value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/3ytRP6q.png" alt=""></p><h2 id="Promise进阶"><a href="#Promise进阶" class="headerlink" title="Promise进阶"></a>Promise进阶</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><blockquote><p>Promise.all([p1,p2,p3,……])用于将多个Promise实例，包装成一个新的Promise实例。返回一个普通的Promise实例。</p></blockquote><ul><li>它接受一个数组作为参数。</li><li>数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态的改变。</li><li>当所有子Promise都完成，该Promise完成，返回值是全部返回值组成的数组。</li><li>有任何一个失败，该Promise失败，返回值是第一个失败的子Promise的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1:'</span>, all);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'oxxx'</span>);</span><br><span class="line">  &#125;, <span class="string">'xx00'</span>,<span class="literal">false</span>]);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2:'</span>, all);</span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'I\'m P2'</span>);</span><br><span class="line">    &#125;, <span class="number">1300</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([p1, p2]);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3:'</span>, all);</span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'I\'m P1'</span>);</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">'I\'m P2'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      reject(<span class="string">'I\'m P3'</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">all</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'all'</span>, all);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Catch: '</span> + err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4gEt1oQ.png" alt=""></p><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><blockquote><p>返回一个<code>fulfilled</code>的Promise实例，或者原始的Promise实例</p></blockquote><ul><li>参数为空，返回一个状态为<code>fulfilled</code>的Promise实例</li><li>参数是一个跟Promise无关的值，同上，不过<code>fulfilled</code>响应函数会得到这个参数</li><li>参数为Promise实例，则返回该实例，不做任何修改</li><li>参数为thenable，立刻执行它的.then()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Step 1'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="string">'world'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">'Good'</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;).then( <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, <span class="string">'evening'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    then() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">', everyone'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/WUhhEs8.png" alt=""></p><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p><code>Promise.race</code>方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p><code>Promise.race([p1, p2, p3]);</code></p><p>只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p><p>看一个<code>Promise.race</code>在实际开发中的应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function"><span class="params">timeout</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="string">'请求超时'</span>), timeout * <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="function">(<span class="params">&#123;url, params = &#123;&#125;, timeout&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> paramArr = []</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(params).length !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line">      paramArr.push(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> urlStr = <span class="string">`<span class="subst">$&#123;url&#125;</span>?<span class="subst">$&#123;paramArr.join(<span class="string">'&amp;'</span>)&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (timeout === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(urlStr)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Promise.race当数组中有一个promise返回则返回，其余的不再执行。如果超时了就不执行了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([fetch(urlStr), delay(timeout)])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; get &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JavaScript之promise异步编程
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="promise" scheme="http://yoursite.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的预编译过程</title>
    <link href="http://yoursite.com/2018/03/01/javascriptPrecompile/"/>
    <id>http://yoursite.com/2018/03/01/javascriptPrecompile/</id>
    <published>2018-03-01T09:28:25.000Z</published>
    <updated>2018-05-10T07:33:51.973Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JavaScript在运行时，要经历三步</p><ol><li>语法分析 2.预编译 3.解析执行(自上而下)</li></ol></blockquote><h2 id="JavaScript预编译"><a href="#JavaScript预编译" class="headerlink" title="JavaScript预编译"></a>JavaScript预编译</h2><p>先思考这么一个题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b =<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h3 id="预编译四部曲"><a href="#预编译四部曲" class="headerlink" title="预编译四部曲"></a>预编译四部曲</h3><ol><li>创建AO对象 Activation Object（执行期上下文）</li><li>找形参和变量声明，将变量和形参名作为AO属性名，值为undefined</li><li>将实参值和形参统一</li><li>在函数体里面找函数声明，值赋予函数体</li></ol><p>这四步的权重比4&gt;3&gt;2&gt;1,也就是一个覆盖的过程.<br>函数声明在变量声明的前面</p><blockquote><p>函数声明才存在变量提升。即<code>function a(){};</code>,而<code>var b =function (){};</code>不会提升。</p></blockquote><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><h4 id="先看一个面试中常遇到的问题"><a href="#先看一个面试中常遇到的问题" class="headerlink" title="先看一个面试中常遇到的问题"></a>先看一个面试中常遇到的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// function a()&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>逐行执行，在AO中是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: undefied</span><br><span class="line">&#125;</span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="换一换"><a href="#换一换" class="headerlink" title="换一换"></a>换一换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>逐行执行，在AO中是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: undefied</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js是自上而下执行的，先执行var a = 1; 所有AO中的a就被覆盖</span></span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="按步骤分析文章开头的例子"><a href="#按步骤分析文章开头的例子" class="headerlink" title="按步骤分析文章开头的例子"></a>按步骤分析文章开头的例子</h4><ul><li>第一步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="literal">undefined</span>,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第三步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第四步</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h2><p>执行的时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AO&#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a = 123;</span></span><br><span class="line">AO&#123;</span><br><span class="line">  a: <span class="number">123</span>,</span><br><span class="line">  b: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// function()&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b =<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// function()&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="加入window-全局环境"><a href="#加入window-全局环境" class="headerlink" title="加入window,全局环境"></a>加入window,全局环境</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(global);</span><br><span class="line">  global = <span class="number">200</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(global);</span><br><span class="line">  <span class="keyword">var</span> global = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">var</span> global;</span><br></pre></td></tr></table></figure><p>在全局环境中会生成一个 GO对象 （Global Object），还是按照上面的四步执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO &#123;</span><br><span class="line">  global: <span class="literal">undefined</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>// 执行到 <code>global = 100</code> :<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO &#123;</span><br><span class="line">  global: <span class="number">100</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当执行<code>fn</code>之前会先生成一个AO:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">  global: <span class="literal">undefined</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以第一次打印<code>global</code>是<code>undefined</code>。</p><blockquote><p>这个时候虽然全局变量中的<code>global</code>已经是<code>100</code>,但是<code>fn</code>函数中自己有<code>global</code>变量，所以不会引用全局中的。</p></blockquote><p>当执行到<code>global = 200</code> :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">  global: <span class="number">200</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以第二次打印<code>global</code>是<code>200</code></p><blockquote><p>这里这中情况涉及到了‘作用域’。</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p> JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。</p></blockquote><p>词法作用域是一种静态作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>这个例子的结果：1</p><h3 id="按静态作用域来分析"><a href="#按静态作用域来分析" class="headerlink" title="按静态作用域来分析"></a>按静态作用域来分析</h3><p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p><h3 id="JavaScript的预编译过程来分析"><a href="#JavaScript的预编译过程来分析" class="headerlink" title="JavaScript的预编译过程来分析"></a>JavaScript的预编译过程来分析</h3><p>这里有全局的环境：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里我就写最后一步了</span></span><br><span class="line">GO &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(value)&#125;,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">var</span> value = <span class="number">2</span>; foo()&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数在执行时也会生成自己的AO</span></span><br><span class="line">fooAO&#123;</span><br><span class="line">  <span class="comment">// 没有</span></span><br><span class="line">&#125;</span><br><span class="line">barAO&#123;</span><br><span class="line">  value: <span class="number">2</span>，</span><br><span class="line">  foo: foo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/BOh1hJO.png" alt=""></p><p>foo函数中没有定义value，所以它会到它所在的上一层去找，并不会去bar里面找</p><p>把这个题做一个小小的改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>这样结果就是2了。<br><img src="https://i.imgur.com/JPpPtMu.png" alt=""></p><p>在bar函数中不定义value，而是让它直接改变value的值，他自己没有定义，它也会去全局GO里面找，这样bar里面的value和全局中的value就是同一个内存中的数，当代码执行到<code>value=2</code>，再执行foo()时，全局中的value也是2，所以输出2。在第一种，情况中，<code>var value=2</code>只改变了barAO中的值。</p><p>再来，我们再变一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br></pre></td></tr></table></figure></p><p>结果还是2.</p><p>这次我们没有全局定义value，在bar中也没有定义，而是直接赋值。在JavaScript中如果一个变量未声明就直接赋值，那么这个变量就是个全局变量。所以GO中会定义一个<code>value:2</code>,foo也没有去bar里面找value。</p><blockquote><p>静态作用域，决定的是作用域链的顺序。</p></blockquote><h2 id="最后思考一个问题"><a href="#最后思考一个问题" class="headerlink" title="最后思考一个问题"></a>最后思考一个问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = b = <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>var a = b =100;<br>先将100赋值给b，即b=100，此时b没有声明就被赋值。</p></blockquote>]]></content>
    
    <summary type="html">
    
      通过JavaScript的预编译过程，充分理解变量提升
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript常用排序算法</title>
    <link href="http://yoursite.com/2018/03/01/JavaScriptArithmetic/"/>
    <id>http://yoursite.com/2018/03/01/JavaScriptArithmetic/</id>
    <published>2018-03-01T02:15:37.000Z</published>
    <updated>2018-04-23T01:47:31.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡算法"><a href="#冒泡算法" class="headerlink" title="冒泡算法"></a>冒泡算法</h2><blockquote><p>原理：从第一个元素开始，往后比较，遇到自己小的元素就交换位置</p></blockquote><p><img src="http://p9.pstatp.com/large/31f700004cd560512e10" alt="此处输入图片的描述"><br>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 冒泡算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line"><span class="comment">// 为什么要减一，数组从0开始，先取第一个与第二个比，再将较大值与第三个比，一直比到最后一个，再拿第二个值与第三个比……(外层循环一次，内层循环多次)</span></span><br><span class="line">  <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123; <span class="comment">// 比较相邻两个值的大小</span></span><br><span class="line"><span class="keyword">var</span> temp = arr[j+<span class="number">1</span>]; <span class="comment">// 临时变量存储arr[j+1]的值</span></span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j]; <span class="comment">// 将arr[j]的值赋值给arr[j+1]，即把较大值往后放</span></span><br><span class="line">arr[j] = temp; <span class="comment">// 又将temp的值赋值给arr[j]，即将较小值往前放</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">16</span>, <span class="number">35</span>, <span class="number">7</span>];</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 16, 35, 90]</span></span><br></pre></td></tr></table></figure></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><img src="http://p1.pstatp.com/large/32040001405eee3b0feb" alt="此处输入图片的描述"><br>Gif图：<br><img src="http://p3.pstatp.com/large/31f30005215262ad5c2c" alt="此处输入图片的描述"></p><blockquote><p>特点：<br>插入排序把要排序的数组分成两部分：<br>第一部分包含了这个数组的所有元素，但将第一个元素除外（让数组多一个空间才有插入的位置）。<br>第二部分就是包含了这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分<br>比冒泡排序快一点</p></blockquote><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 从第二个元素开始，因为要留一个坑</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = arr[i]; <span class="comment">// 现将arr[i]的值存下来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = i<span class="number">-1</span>; arr[j] &gt; x; j--) &#123;</span><br><span class="line">  arr[j+<span class="number">1</span>] = arr[j]; <span class="comment">// i=3时 [2, 3, 6, 6, ...]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[j+<span class="number">1</span>] != x) &#123;</span><br><span class="line">  arr[j+<span class="number">1</span>] = x; <span class="comment">// i=3时 j=2 [2, 3, 4, 6, ...]</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(insertSort(arr)); <span class="comment">//[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><img src="http://p9.pstatp.com/large/31f50001fa47898d558e" alt="此处输入图片的描述"></p><p><img src="http://p3.pstatp.com/large/31f7000052f9c0b67e86" alt="此处输入图片的描述"></p><p>  代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> gap = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">  temp = arr[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt;= gap &amp;&amp; arr[j-gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">    arr[j] = arr[j - gap];</span><br><span class="line">  &#125;</span><br><span class="line">  arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(shellSort(arr)); <span class="comment">//[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="http://p1.pstatp.com/large/3202000045b4fa206217" alt="此处输入图片的描述"><br>3、对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<br><img src="http://p3.pstatp.com/large/320b0000495f2a5aceaa" alt="此处输入图片的描述"></p><blockquote><p>特点：速度最快。和归并排序不同的是，归并排序是先分为两组再继续排，而快速排序是边分边排</p></blockquote><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大致分三步：</span></span><br><span class="line"><span class="comment">// 1、找基准（一般以中间项为基准）</span></span><br><span class="line"><span class="comment">// 2、遍历数组，小于基准的放在left，大于基准的放在right</span></span><br><span class="line"><span class="comment">// 3、递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果数组&lt;=1，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 找基准，并把基准从原数组删除</span></span><br><span class="line">  <span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 定义左右数组</span></span><br><span class="line">  <span class="keyword">var</span> left = [];</span><br><span class="line">  <span class="keyword">var</span> right = [];</span><br><span class="line">  <span class="comment">// 比基准小的放在left，比基准大的放在right</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt;= pivot) &#123;</span><br><span class="line">   left.push(arr[i]);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   right.push(arr[i]);</span><br><span class="line"> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  <span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr)); <span class="comment">//[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p><h2 id="奇偶排序"><a href="#奇偶排序" class="headerlink" title="奇偶排序"></a>奇偶排序</h2><p><img src="http://p3.pstatp.com/large/320200004c84b8c20819" alt="此处输入图片的描述"></p><p><img src="http://p3.pstatp.com/large/320200004d44a4a1bb61" alt="此处输入图片的描述"></p><p>代码实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//奇偶排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oddEvenSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="comment">// swaped用来控制循环是否要继续，如果左边的都比右边的小，则退出循环，返回排好的数组</span></span><br><span class="line">  <span class="keyword">var</span> swaped = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(swaped) &#123;</span><br><span class="line">    <span class="keyword">if</span>(k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  swaped = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = k;i &lt; arr.length<span class="number">-1</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i] &gt; arr[i+<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="comment">// 如果左边的数字比右边的大，两边交换位置</span></span><br><span class="line">    arr[i] = [arr[i+<span class="number">1</span>], arr[i+<span class="number">1</span>] = arr[i]][<span class="number">0</span>];</span><br><span class="line">swaped = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">k = [<span class="number">1</span>, <span class="number">0</span>][k]; <span class="comment">// 奇偶数之间的转换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">90</span>, <span class="number">100</span>, <span class="number">20</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(oddEvenSort(arr)); <span class="comment">// [1, 2, 3, 4, 5, 6, 20, 90, 100]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      JavaScript常用排序算法
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript —— New</title>
    <link href="http://yoursite.com/2018/02/27/new/"/>
    <id>http://yoursite.com/2018/02/27/new/</id>
    <published>2018-02-27T14:05:47.000Z</published>
    <updated>2018-04-23T01:47:31.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>热身<br>New 这个关键字 是创建对象的？<br>JS中万物皆是对象。<br>new 关键字是用来继承的。 =&gt; 面向对象的基础</p></blockquote><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line">person.sayYourName(); <span class="comment">// I am张三</span></span><br></pre></td></tr></table></figure><blockquote><p>可以得出使用过New关键字之后生成的person对象具有哪些特点。<br>1：可以访问DN构造函数里的属性<br>2：可以访问到DN.prototype中的属性</p></blockquote><h2 id="经典继承-构造继承"><a href="#经典继承-构造继承" class="headerlink" title="经典继承(构造继承)"></a>经典继承(构造继承)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'Bios'</span>, <span class="string">'FinGet'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.names.push(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ["Bios", "FinGet", "zhangsan"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ["Bios", "FinGet"]</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/4EHPKyE.png" alt=""></p><h2 id="DNew"><a href="#DNew" class="headerlink" title="DNew"></a>DNew</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 隐式原型指向显式原型 将obj的原型链指向构造函数，这样onj就可以访问到构造函数原型链上的属性</span></span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 使用apply(call)改变构造函数this的指向到新建的对象，这样obj可以访问构造函数的属性。这里的arguments是剔除了第一个参数的。</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = DNew(DN,<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line">person.sayYourName(); <span class="comment">// I am张三</span></span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><blockquote><p>构造函数是可能有返回值的！</p></blockquote><h4 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">  name: name,</span><br><span class="line">salary: <span class="string">"30k"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// undefined</span></span><br><span class="line">person.sayYourName(); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h4 id="返回基本类型"><a href="#返回基本类型" class="headerlink" title="返回基本类型"></a>返回基本类型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"finget"</span></span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 张三</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 18</span></span><br><span class="line">person.sayYourName(); <span class="comment">// I am张三</span></span><br></pre></td></tr></table></figure><ul><li>当构造函数的返回值为对象时，返回的内容能取到，其他内部属性和原型上的方法都取不到。</li><li>当构造函数的返回值为基本类型时， 跟没写<code>return</code>语句效果一样。</li></ul><h3 id="改进DNew"><a href="#改进DNew" class="headerlink" title="改进DNew"></a>改进DNew</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 隐式原型指向显式原型 将obj的原型链指向构造函数，这样onj就可以访问到构造函数原型链上的属性</span></span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 使用apply(call)改变构造函数this的指向到新建的对象，这样obj可以访问构造函数的属性。这里的arguments是剔除了第一个参数的。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当返回null的时候"><a href="#当返回null的时候" class="headerlink" title="当返回null的时候"></a>当返回null的时候</h3><blockquote><p>当构造函数返回<code>null</code>的时候，我们应该返回obj而不是result</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 隐式原型指向显式原型 将obj的原型链指向构造函数，这样onj就可以访问到构造函数原型链上的属性</span></span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 使用apply(call)改变构造函数this的指向到新建的对象，这样obj可以访问构造函数的属性。这里的arguments是剔除了第一个参数的。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>typeof null == Object;</p></blockquote><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><blockquote><p>var obj = {}; =&gt; var obj = new Object();我们在封装new，却在内部使用了new，所有需要改变一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码过程-我自己看"><a href="#代码过程-我自己看" class="headerlink" title="代码过程(我自己看)"></a>代码过程(我自己看)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 热身</span></span><br><span class="line"><span class="comment">// New 这个关键字 是创建对象的？</span></span><br><span class="line"><span class="comment">// JS中万物皆是对象。</span></span><br><span class="line"><span class="comment">// new 关键字是用来继承的。 =&gt; 面向对象的基础</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DN</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.salary = <span class="string">'30k'</span>;</span><br><span class="line">&#125;</span><br><span class="line">DN.prototype.ability = <span class="number">100</span>;</span><br><span class="line">DN.prototype.sayYourName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> DN(<span class="string">'张三'</span>, <span class="string">'18'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">person.sayYourName();</span><br><span class="line"><span class="comment">// 可以得出使用过New关键字之后生成的person对象具有哪些特点。</span></span><br><span class="line"><span class="comment">// 1：可以访问DN构造函数里的属性</span></span><br><span class="line"><span class="comment">// 2：可以访问到DN.prototype中的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要如何去实现</span></span><br><span class="line"><span class="comment">// 经典继承（借用构造函数的方式）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'Bios'</span>, <span class="string">'FinGet'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line">child1.names.push(<span class="string">'zhangsan'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ["Bios", "FinGet", "zhangsan"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ["Bios", "FinGet"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免引用类型的属性，被所有实例对象共享</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、怎么获取原型链上的属性</span></span><br><span class="line"><span class="comment">// __proto__</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>)</span>&#123;</span><br><span class="line">  root.$ = root.DN = factory();</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> DN = &#123;</span><br><span class="line">DNew: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> DN;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      new构建实例的过程实现
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>初识函数式编程</title>
    <link href="http://yoursite.com/2018/02/26/functionalProgramming/"/>
    <id>http://yoursite.com/2018/02/26/functionalProgramming/</id>
    <published>2018-02-26T08:55:42.000Z</published>
    <updated>2018-04-23T01:47:31.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是函数式编程？"><a href="#什么是函数式编程？" class="headerlink" title="什么是函数式编程？"></a>什么是函数式编程？</h2><blockquote><p>函数式编程的本质，函数式编程中的函数这个术语不是指计算机中的函数，而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，无论什么时候调用，调用几次，值都是不变的。</p></blockquote><h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><blockquote><p>函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的没有副作用。函数即不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试更容易。</p></blockquote><h2 id="在那些地方用到了？"><a href="#在那些地方用到了？" class="headerlink" title="在那些地方用到了？"></a>在那些地方用到了？</h2><blockquote><p>随着React、vue的火热，函数式编程的概念也开始流行起来，多种前端状态管理框架Flux redux Vuex早期的underscore RxJS库都使用了函数式的特性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      通过JavaScript初步了解函数式编程
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>初识JavaScript柯理化</title>
    <link href="http://yoursite.com/2018/02/26/curry/"/>
    <id>http://yoursite.com/2018/02/26/curry/</id>
    <published>2018-02-26T08:20:56.000Z</published>
    <updated>2018-04-23T01:47:31.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是柯理化"><a href="#什么是柯理化" class="headerlink" title="什么是柯理化"></a>什么是柯理化</h2><blockquote><p>在计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数(最初函数的第一个参数)的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p></blockquote><p>把含有N个参数的函数转变成，N个只有一个参数的函数。</p><p>中心思想：降低通用性，提高适用性。</p><blockquote><p>通用的设计比适用的设计复杂，因此更难使用。</p></blockquote><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>参数复用</li><li>提前返回 (return)</li><li>延迟执行</li></ul><h2 id="参数复用"><a href="#参数复用" class="headerlink" title="参数复用"></a>参数复用</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>瑞士军刀，上面有小剪刀，但是这个小剪刀肯定没有一个单独的剪刀好用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dubble</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dobble</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i * <span class="number">1.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">handeler, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.map(handeler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 必须要传第一个参数，才能使用map函数</span></span><br><span class="line"><span class="built_in">console</span>.log(map(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(map(square, [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]));</span><br><span class="line"><span class="comment">// 容易混淆</span></span><br><span class="line"><span class="built_in">console</span>.log(map(dubble, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(map(dobble, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(map(dubble, [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提高适用性 语义清除，方便使用</span></span><br><span class="line"><span class="comment">// 假设存在一个curry方法</span></span><br><span class="line"><span class="keyword">var</span> mapSQ = curry(map, square);</span><br><span class="line">mapSQ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">mapSQ([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mapDQ = curry(map, dubble);</span><br><span class="line">mapDQ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line">mapDQ([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(type, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'name=finget'</span>);</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'name=bios'</span>);</span><br><span class="line">ajax(<span class="string">'POST'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'name=mario'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯理化 减少参数</span></span><br><span class="line"><span class="keyword">var</span> ajaxCurry = curry(ajax);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用POST请求</span></span><br><span class="line"><span class="keyword">var</span> post = ajaxCurry(<span class="string">'POST'</span>);</span><br><span class="line">post(<span class="string">'www.baidu.com'</span>,<span class="string">'name=finget'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postFromBaidu = post(<span class="string">'www.baidu.com'</span>);</span><br><span class="line">postToBaidu(<span class="string">'name=finget'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码类似与 $.ajax =&gt; $.post / $.get</span></span><br></pre></td></tr></table></figure><ul><li>参数的多少跟函数体的复杂性成正比</li><li>参数的多少跟函数的维护难度成正比</li><li>参数的多少跟用户的使用难度成正比</li></ul><blockquote><p>成熟的框架jquery, lodash 一个方法基本不超过4个参数。大多数就是3个或者2个参数，方法体不超过40行</p></blockquote><h4 id="一个简单的柯理化函数"><a href="#一个简单的柯理化函数" class="headerlink" title="一个简单的柯理化函数"></a>一个简单的柯理化函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">5</span>,<span class="number">10</span>)); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curryAdd = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add5 = curryAdd(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 这里就类似与var post = ajaxCurry('POST');</span></span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h2 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fishWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> addWeight = <span class="function"><span class="keyword">function</span>(<span class="params">weight</span>)</span>&#123;</span><br><span class="line">  fishWeight += weight;</span><br><span class="line">&#125;</span><br><span class="line">addWeight(<span class="number">2.3</span>);</span><br><span class="line">addWeight(<span class="number">6.5</span>);</span><br><span class="line">addWeight(<span class="number">1.2</span>);</span><br><span class="line">addWeight(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fishWeight); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curryWeight = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _fishWeight = [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// apply会执行函数</span></span><br><span class="line">  <span class="comment">// 传入参数时，先把他们存在数组中，当没有传参就执行计算</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, _fishWeight);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// [].slice.call(arguments) 复制一下我们的arguments然后将内容加到我们的_fishWeight中</span></span><br><span class="line">  _fishWeight = _fishWeight.concat([].slice.call(<span class="built_in">arguments</span>));</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryAddWeight = curryWeight(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>; len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt; len; i++) &#123;</span><br><span class="line">    fishWeight += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curryAddWeight(<span class="number">2.3</span>);</span><br><span class="line">curryAddWeight(<span class="number">6.5</span>);</span><br><span class="line">curryAddWeight(<span class="number">1.2</span>);</span><br><span class="line">curryAddWeight(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// curryAddWeight(); 不加这句，console.log(fishWeight); // 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fishWeight); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>柯理化后的函数是可以复用的<br>// 求平均值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> avgWeight = curryWeight(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>; len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt; len; i++) &#123;</span><br><span class="line">    fishWeight += <span class="built_in">arguments</span>[i] / len;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">avgWeight(<span class="number">2.3</span>);</span><br><span class="line">avgWeight(<span class="number">6.5</span>);</span><br><span class="line">avgWeight(<span class="number">1.2</span>);</span><br><span class="line">avgWeight(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// avgWeight(); 不加这句，console.log(fishWeight); // 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fishWeight); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="实现一个通用的一元curry函数"><a href="#实现一个通用的一元curry函数" class="headerlink" title="实现一个通用的一元curry函数"></a>实现一个通用的一元curry函数</h2><ul><li>curry函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn, args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> length = fn.length; <span class="comment">// 方法参数个数 *注1</span></span><br><span class="line">  args = args || [];</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _args = args.slice(<span class="number">0</span>), arg, i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">  arg = <span class="built_in">arguments</span>[i];</span><br><span class="line">  _args.push(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_args.length &lt; length) &#123;</span><br><span class="line">  <span class="keyword">return</span> curry.call(<span class="keyword">this</span>, fn, _args);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, _args);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注1：var length = fn.length; // 方法参数个数 *注1<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.dir(add);</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="https://i.imgur.com/c1ZhiPE.png" alt=""></p><ul><li>使用curry函数</li></ul><blockquote><p>这个curry方法可以解决一元柯理化的场景，不是万能的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryAdd = curry(add);</span><br><span class="line"><span class="keyword">var</span> curryAdd5 = curry(add, [<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd5(<span class="number">10</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curryAdd = curry(add);</span><br><span class="line"><span class="keyword">var</span> curryAdd5 = curry(add, [<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>)(<span class="number">15</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>,<span class="number">10</span>)(<span class="number">15</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>)(<span class="number">10</span>,<span class="number">15</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>));<span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd5(<span class="number">10</span>)(<span class="number">15</span>));<span class="comment">// 30</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      初步认识柯理化
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>四大维度解锁webpack3笔记</title>
    <link href="http://yoursite.com/2018/02/08/webpack/"/>
    <id>http://yoursite.com/2018/02/08/webpack/</id>
    <published>2018-02-08T02:44:38.000Z</published>
    <updated>2018-04-23T01:47:31.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/NbPRvzp.png" alt=""></p><h2 id="Webpack简介"><a href="#Webpack简介" class="headerlink" title="Webpack简介"></a>Webpack简介</h2><h3 id="Webpack-概述"><a href="#Webpack-概述" class="headerlink" title="Webpack 概述"></a>Webpack 概述</h3><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p><img src="https://i.imgur.com/hyxOIz4.png" alt=""><br><a href="https://webpack.js.org/" target="_blank" rel="noopener"><strong>Webpack官网</strong></a></p><h3 id="Webpack-的版本更迭"><a href="#Webpack-的版本更迭" class="headerlink" title="Webpack 的版本更迭"></a>Webpack 的版本更迭</h3><ul><li>Webpack v1.0.0 — 2014.2.20</li><li>Webpack v2.2.0 — 2017.1.18</li><li>Webpack v3.0.0 — 2017.6.19</li></ul><h3 id="Webpack-功能进化"><a href="#Webpack-功能进化" class="headerlink" title="Webpack 功能进化"></a>Webpack 功能进化</h3><ul><li>Webpack V1<ul><li>编译、打包</li><li>HMR(模块热更新)</li><li>代码分割</li><li>文件处理(loader、plugin)</li></ul></li><li>Webpack V2<ul><li>Tree Shaking(在项目中没有实际运用的代码会被删除，打包体积更小)</li><li>ES module</li><li>动态Import</li></ul></li><li>Webpack V3<ul><li>Scope Hoisting(作用域提升)</li><li>Magic Comments(配合动态import使用)</li></ul></li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3><blockquote><p>代码的入口，打包入口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 推荐写法</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">index: <span class="string">'index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 多个入口</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">    pageTwo: <span class="string">'./src/pageTwo/index.js'</span>,</span><br><span class="line">    pageThree: <span class="string">'./src/pageThree/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    search: <span class="string">'./src/search.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// 打包之后的文件名 [name]就对应entry里面的key值。</span></span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span> <span class="comment">// 打包输出文件路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个loader</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多个loader</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则匹配css文件</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123; <span class="comment">// loader配置</span></span><br><span class="line">              modules: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">//installed via npm</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: <span class="string">'babel-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;) <span class="comment">// 根据`./src/index.html`生成一个首页，会引入打包的js、css文件</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h2 id="使用Webpack"><a href="#使用Webpack" class="headerlink" title="使用Webpack"></a>使用Webpack</h2><h3 id="安装Webpack"><a href="#安装Webpack" class="headerlink" title="安装Webpack"></a>安装Webpack</h3><p><code>npm i -g webpack</code><br>当然你得先安装nodejs、Git</p><p>在命令行输入<code>webpack -h</code>，成功就出现下图，有很多webpack命令可以看一看<br><img src="https://i.imgur.com/U53NRJ8.png" alt=""></p><h3 id="打包js"><a href="#打包js" class="headerlink" title="打包js"></a>打包js</h3><p><code>webpack entry&lt;entry&gt; output</code><br><code>webpack --config webpack.config.js</code></p><h4 id="第一个栗子"><a href="#第一个栗子" class="headerlink" title="第一个栗子"></a>第一个栗子</h4><p>新建一个app.js和sum.js</p><p>app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es module</span></span><br><span class="line"><span class="keyword">import</span> sum form <span class="string">'./sum'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sun(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure></p><p>sum.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过命令行打包：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">webpack app.js bundle.js</span><br><span class="line"><span class="comment">// app.js 是入口文件 bundle.js是打包输出文件</span></span><br></pre></td></tr></table></figure></p><h3 id="编译ES6"><a href="#编译ES6" class="headerlink" title="编译ES6"></a>编译ES6</h3><p>需要两个loader：<br><code>npm i babel-loader babel-core -D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">app: <span class="string">'app.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">use: <span class="string">'babel-loader'</span>,</span><br><span class="line">exclude: <span class="string">'/node_modules/'</span> <span class="comment">// 将node_module中的文件排除在外，因为已经是编译过的</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{ test: Condition }</code>：匹配特定条件。一般是提供一个正则表达式或正则表达式的数组，但这不是强制的。</p><p><code>{ include: Condition }</code>：匹配特定条件。一般是提供一个字符串或者字符串数组，但这不是强制的。</p><p><code>{ exclude: Condition }</code>：排除特定条件。一般是提供一个字符串或字符串数组，但这不是强制的。</p><p><code>{ and: [Condition] }</code>：必须匹配数组中的所有条件</p><p><code>{ or: [Condition] }</code>：匹配数组中任何一个条件</p><p><code>{ not: [Condition] }</code>：必须排除这个条件</p><h4 id="Babel-Presets"><a href="#Babel-Presets" class="headerlink" title="Babel Presets"></a>Babel Presets</h4><p>虽然引入了<code>babel-loader</code>，但是它并不知道是根据什么规范来打包的，这个时候就需要配置一个Babel Presets（预设）<br><code>npm i babel-preset-env -D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">use: &#123;</span><br><span class="line">loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">options: &#123; <span class="comment">// options 属性为字符串或对象。值可以传递到 loader 中，将其理解为 loader 选项。</span></span><br><span class="line">presets: [<span class="string">'babel-preset-env'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">exclude: <span class="string">'/node_modules/'</span> <span class="comment">// 将node_module中的文件排除在外，因为已经是编译过的</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Babel-Polyfill"><a href="#Babel-Polyfill" class="headerlink" title="Babel Polyfill"></a>Babel Polyfill</h4><p><code>npm install --save babel-polyfill</code><br>使用babel-polyfill<br><code>import &#39;babel-polyfill&#39;</code></p><p>Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。</p><blockquote><p>Polyfill 垫片：<br><code>polyfill</code>这个英文单词在js babel中的翻译可以说是垫片，本来指的是衣服中的填充物。<br>在这里可以说是为了使用某个浏览器或者其他执行环境不支持的函数或者对象能够使用而添加的原型方法，或者第三方库。</p></blockquote><p>例如：<br>我们想要使用es2015的语法中的某些新的对象方法或者数据类型，就需要添加<code>babel-polyfill</code>，例如<code>Array.from</code>方法很多浏览器不支持，你就需要垫片来提高兼容性。<br>为了在版本低浏览器中能够使用<code>promise</code>，我们需要提前执行一个<code>promise</code>文件，以便能够在全局中使用。</p><h4 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a>babel-runtime</h4><p><code>npm i --save babel-runtime</code><br>Babel 转译后的代码要实现源代码同样的功能需要借助一些帮助函数，例如，{ [name]: ‘JavaScript’ } 转译后的代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      value: value,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      writable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = _defineProperty(&#123;&#125;, <span class="string">'name'</span>, <span class="string">'JavaScript'</span>);</span><br></pre></td></tr></table></figure></p><p>类似上面的帮助函数 _defineProperty 可能会重复出现在一些模块里，导致编译后的代码体积变大。Babel 为了解决这个问题，提供了单独的包 <code>babel-runtime</code> 供编译模块复用工具函数。</p><p><code>npm i babel-plugin-transform-runtime -D</code></p><p>新建<code>.babelrc</code>文件,之前是直接将presets设置在loader中的，也可以单独写在<code>.babelrc</code>文件中，babel会自动读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;presets&quot;: [</span><br><span class="line">[&quot;babel-preset-env&quot;]</span><br><span class="line">],</span><br><span class="line">&quot;plugins&quot;: [&quot;transform-runtime&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启用插件 <code>babel-plugin-transform-runtime</code> 后，Babel 就会使用 <code>babel-runtime</code> 下的工具函数，转译代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 之前的 _defineProperty 函数已经作为公共模块 `babel-runtime/helpers/defineProperty` 使用</span></span><br><span class="line"><span class="keyword">var</span> _defineProperty2 = <span class="built_in">require</span>(<span class="string">'babel-runtime/helpers/defineProperty'</span>);</span><br><span class="line"><span class="keyword">var</span> _defineProperty3 = _interopRequireDefault(_defineProperty2);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"><span class="keyword">var</span> obj = (<span class="number">0</span>, _defineProperty3.default)(&#123;&#125;, <span class="string">'name'</span>, <span class="string">'JavaScript'</span>);</span><br></pre></td></tr></table></figure></p><p>除此之外，babel 还为源代码的非实例方法（Object.assign，实例方法是类似这样的 “foobar”.includes(“foo”)）和 babel-runtime/helps 下的工具函数自动引用了 polyfill。这样可以避免污染全局命名空间，非常适合于 JavaScript 库和工具包的实现。例如 const obj = {}, Object.assign(obj, { age: 30 }); 转译后的代码如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 使用了 core-js 提供的 assign</span></span><br><span class="line"><span class="keyword">var</span> _assign = <span class="built_in">require</span>(<span class="string">'babel-runtime/core-js/object/assign'</span>);</span><br><span class="line"><span class="keyword">var</span> _assign2 = _interopRequireDefault(_assign);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">(<span class="number">0</span>, _assign2.default)(obj, &#123;</span><br><span class="line">  age: <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h3><blockquote><p>js的超集，可以在typescript中写JavaScript</p></blockquote><h4 id="typescript-loader"><a href="#typescript-loader" class="headerlink" title="typescript-loader"></a>typescript-loader</h4><p>官方loader<br><code>npm i typescript ts-loader -D</code><br>第三方loader<br><code>npm i typescript awesome-typescript-loader -D</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.ts'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">'ts-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>tsconfig.json<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span> : &#123;</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>, <span class="comment">// 将ts编译成es5语法</span></span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>  <span class="comment">// 是否允许出现js语法</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"include"</span>: &#123;</span><br><span class="line">    <span class="string">"./src/*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: &#123;</span><br><span class="line">    <span class="string">"./node_module"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="打包公共代码"><a href="#打包公共代码" class="headerlink" title="打包公共代码"></a>打包公共代码</h3><h4 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h4><h5 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: string, <span class="comment">// or</span></span><br><span class="line">  names: string[],</span><br><span class="line">  <span class="comment">// 这是 common chunk 的名称。已经存在的 chunk 可以通过传入一个已存在的 chunk 名称而被选择。</span></span><br><span class="line">  <span class="comment">// 如果一个字符串数组被传入，这相当于插件针对每个 chunk 名被多次调用</span></span><br><span class="line">  <span class="comment">// 如果该选项被忽略，同时 `options.async` 或者 `options.children` 被设置，所有的 chunk 都会被使用，</span></span><br><span class="line">  <span class="comment">// 否则 `options.filename` 会用于作为 chunk 名。</span></span><br><span class="line">  <span class="comment">// When using `options.async` to create common chunks from other async chunks you must specify an entry-point</span></span><br><span class="line">  <span class="comment">// chunk name here instead of omitting the `option.name`.</span></span><br><span class="line"></span><br><span class="line">  filename: string,</span><br><span class="line">  <span class="comment">// common chunk 的文件名模板。可以包含与 `output.filename` 相同的占位符。</span></span><br><span class="line">  <span class="comment">// 如果被忽略，原本的文件名不会被修改(通常是 `output.filename` 或者 `output.chunkFilename`)。</span></span><br><span class="line">  <span class="comment">// This option is not permitted if you're using `options.async` as well, see below for more details.</span></span><br><span class="line"></span><br><span class="line">  minChunks: number|<span class="literal">Infinity</span>|<span class="function"><span class="keyword">function</span>(<span class="params">module, count</span>) -&gt; <span class="title">boolean</span>,</span></span><br><span class="line"><span class="function">  // 在传入  公共<span class="title">chunk</span>(<span class="params">commons chunk</span>) 之前所需要包含的最少数量的 <span class="title">chunks</span> 。</span></span><br><span class="line"><span class="function">  // 数量必须大于等于2，或者少于等于 <span class="title">chunks</span>的数量</span></span><br><span class="line"><span class="function">  // 传入 `<span class="title">Infinity</span>` 会马上生成 公共<span class="title">chunk</span>，但里面没有模块。</span></span><br><span class="line"><span class="function">  // 你可以传入一个 `<span class="title">function</span>` ，以添加定制的逻辑（默认是 <span class="title">chunk</span> 的数量）</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">  chunks: string[],</span><br><span class="line">  <span class="comment">// 通过 chunk name 去选择 chunks 的来源。chunk 必须是  公共chunk 的子模块。</span></span><br><span class="line">  <span class="comment">// 如果被忽略，所有的，所有的 入口chunk (entry chunk) 都会被选择。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  children: boolean,</span><br><span class="line">  <span class="comment">// 如果设置为 `true`，所有  公共chunk 的子模块都会被选择</span></span><br><span class="line"></span><br><span class="line">  deepChildren: boolean,</span><br><span class="line">  <span class="comment">// If `true` all descendants of the commons chunk are selected</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span>: boolean|string,</span><br><span class="line">  <span class="comment">// 如果设置为 `true`，一个异步的  公共chunk 会作为 `options.name` 的子模块，和 `options.chunks` 的兄弟模块被创建。</span></span><br><span class="line">  <span class="comment">// 它会与 `options.chunks` 并行被加载。</span></span><br><span class="line">  <span class="comment">// Instead of using `option.filename`, it is possible to change the name of the output file by providing</span></span><br><span class="line">  <span class="comment">// the desired string here instead of `true`.</span></span><br><span class="line"></span><br><span class="line">  minSize: number,</span><br><span class="line">  <span class="comment">// 在 公共chunk 被创建立之前，所有 公共模块 (common module) 的最少大小。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span>,</span><br><span class="line">    <span class="string">'pageB'</span>: <span class="string">'./src/pageB'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'common'</span>,</span><br><span class="line">      minChunks: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><p>pageB.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageB'</span>;</span><br></pre></td></tr></table></figure></p><p>subPageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./moudleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageA'</span></span><br></pre></td></tr></table></figure></p><p>subPageB.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &apos;./moudleA&apos;;</span><br><span class="line">export default &apos;subPageB&apos;</span><br></pre></td></tr></table></figure></p><p>moduleA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'moduleA'</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/TzdtOpP.png" alt=""></p><h3 id="代码分割-和-懒加载"><a href="#代码分割-和-懒加载" class="headerlink" title="代码分割 和 懒加载"></a>代码分割 和 懒加载</h3><blockquote><p>并不是通过配置webpack实现代码分割和懒加载，而是通过改变写代码的方式</p></blockquote><h4 id="两种实现方法"><a href="#两种实现方法" class="headerlink" title="两种实现方法"></a>两种实现方法</h4><h5 id="webpack-methods"><a href="#webpack-methods" class="headerlink" title="webpack methods"></a>webpack methods</h5><h6 id="require-ensure"><a href="#require-ensure" class="headerlink" title="require.ensure"></a>require.ensure</h6><ul><li>[]: dependencies</li><li>callback</li><li>errorCallback</li><li>chunkName</li></ul><h6 id="require-include"><a href="#require-include" class="headerlink" title="require.include"></a>require.include</h6><h5 id="ES-2015-Loader-spec"><a href="#ES-2015-Loader-spec" class="headerlink" title="ES 2015 Loader spec"></a>ES 2015 Loader spec</h5><p>System.import() -&gt; import()<br>import() -&gt; Promise<br>import().then()</p><h4 id="代码分割场景"><a href="#代码分割场景" class="headerlink" title="代码分割场景"></a>代码分割场景</h4><ul><li>分离业务代码 和 第三方依赖</li><li>分离业务代码 和 业务公共代码 和 第三方依赖</li><li>分离首次加载 和 访问后加载的代码 (优化，首屏加载)</li></ul><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'pageA'</span>: <span class="string">'./src/pageA'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">publicPath: <span class="string">'./dist/'</span>,</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import * as _ from 'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'lodash'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 这一步是引入lodash并不会执行</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>); <span class="comment">// 这一步就会执行lodash， 异步加载</span></span><br><span class="line">_.join([<span class="string">'1'</span>,<span class="string">'2'</span>],<span class="string">'3'</span>); <span class="comment">// 可以使用lodash</span></span><br><span class="line">&#125;,<span class="string">'vendor'</span>) <span class="comment">// 'vendor'为 chunk name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码也可以写成</span></span><br><span class="line"><span class="built_in">require</span>.ensure([],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>); </span><br><span class="line">_.join([<span class="string">'1'</span>,<span class="string">'2'</span>],<span class="string">'3'</span>);</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><p>subPageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./moudleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageA'</span></span><br></pre></td></tr></table></figure></p><p>subPageB.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./moudleA'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageB'</span></span><br></pre></td></tr></table></figure></p><p>moduleA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'moduleA'</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/f2BctzC.png" alt=""></p><h5 id="按条件加载模块"><a href="#按条件加载模块" class="headerlink" title="按条件加载模块"></a>按条件加载模块</h5><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码 按条件加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./subPageA'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> subpageA = <span class="built_in">require</span>(<span class="string">'./subPageA'</span>);</span><br><span class="line">&#125;,<span class="string">'subPageA'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subpageB'</span>) &#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'./subPageB'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> subpageB = <span class="built_in">require</span>(<span class="string">'./subPageB'</span>);</span><br><span class="line">&#125;,<span class="string">'subPageB'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.ensure([],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>); </span><br><span class="line">_.join([<span class="string">'1'</span>,<span class="string">'2'</span>],<span class="string">'3'</span>);</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/FLAp7V9.png" alt=""></p><h4 id="动态import"><a href="#动态import" class="headerlink" title="动态import"></a>动态import</h4><p>pageA.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码 按条件加载模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subpageA'</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageA' */</span><span class="string">'./subPageA'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageA</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(subPageA);</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (page === <span class="string">'subpageB'</span>) &#123;</span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName:'subpageB' */</span><span class="string">'./subPageB'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageB</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(subPageB);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="处理CSS"><a href="#处理CSS" class="headerlink" title="处理CSS"></a>处理CSS</h3><ul><li>css-loader </li><li>style-loader // 在页面中插入style标签</li></ul><p><code>npm i style-loader css-loader</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">&#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">&#123;</span><br><span class="line">  loader: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="配置Less-Sass"><a href="#配置Less-Sass" class="headerlink" title="配置Less/Sass"></a>配置Less/Sass</h4><p><code>npm i less-loader less --save-dev</code></p><p><code>npm i sass-loader node-sass --save-dev</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">&#123;</span><br><span class="line">        loader: <span class="string">'style-loader'</span></span><br><span class="line">      &#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: <span class="string">'less-loader'</span></span><br><span class="line">&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="提前CSS"><a href="#提前CSS" class="headerlink" title="提前CSS"></a>提前CSS</h4><p><code>npm i extract-text-webpack-plugin --save-dev</code></p><p>webpack.config.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin);</span></span><br><span class="line"><span class="string">module.exports = &#123;</span></span><br><span class="line"><span class="string">  entry: &#123;</span></span><br><span class="line"><span class="string">    '</span>app<span class="string">': '</span>./src/app.js<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  output: &#123;</span></span><br><span class="line"><span class="string">    filename: '</span>[name].bundle.js<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  module: &#123;</span></span><br><span class="line"><span class="string">    rules: &#123;</span></span><br><span class="line"><span class="string">      test: /\.less$/,</span></span><br><span class="line"><span class="string">      use: ExtractTextWebpackPlugin.extract(&#123;</span></span><br><span class="line"><span class="string">        fallback: &#123;</span></span><br><span class="line"><span class="string">          loader: '</span>style-loader<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">use: [</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    loader: '</span>style-loader<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    loader: '</span>css-loader<span class="string">',</span></span><br><span class="line"><span class="string">options:&#123;</span></span><br><span class="line"><span class="string">  minimize: true // 压缩</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">    loader: '</span>less-loader<span class="string">'</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">  &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  plugins:[</span></span><br><span class="line"><span class="string">  new ExtractTextWebpackPlugin(&#123;</span></span><br><span class="line"><span class="string">  filename: '</span>[name].min.css<span class="string">',</span></span><br><span class="line"><span class="string">  allChunks: false</span></span><br><span class="line"><span class="string">  //  allChunks默认false，只打包初始化的css，异步加载的css不会打包</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="PostCSS-in-WebPack"><a href="#PostCSS-in-WebPack" class="headerlink" title="PostCSS in WebPack"></a>PostCSS in WebPack</h3><ul><li><p>PostCSS</p><blockquote><p>A tool for transforming CSS with JavaScript</p></blockquote></li><li><p>Autoprefixer</p><blockquote><p>加上浏览器前缀    </p></blockquote></li><li><p>CSS-nano</p><blockquote><p>压缩css</p></blockquote></li><li><p>CSS-next</p><blockquote><p>Use tomorrow’s CSS syntax,today</p></blockquote></li></ul><h4 id="安装相关插件"><a href="#安装相关插件" class="headerlink" title="安装相关插件"></a>安装相关插件</h4><p><code>npm i postcss postss-loader autoprefixer cssnano postcss-cssnext --save-dev</code></p><h4 id="webpack-配置"><a href="#webpack-配置" class="headerlink" title="webpack 配置"></a>webpack 配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">entry: &#123;</span><br><span class="line">    <span class="string">'app'</span>: <span class="string">'./src/app.js'</span></span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">        fallback: &#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        use: [&#123;</span><br><span class="line">          loader: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            minimize: <span class="literal">true</span> <span class="comment">// 压缩</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">          ident: <span class="string">'postcss'</span>,</span><br><span class="line">            plugins: [</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(),</span><br><span class="line">              <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'less-loader'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">        allChunks: <span class="literal">false</span></span><br><span class="line">        <span class="comment">//  allChunks默认false，只打包初始化的css，异步加载的css不会打包</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h4 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h4><p>场景：</p><ul><li>CSS中引入的图片 —— <code>file-loader</code></li><li>自动合成雪碧图 —— <code>postcss-sprites</code></li><li>压缩图片 —— <code>img-loader</code></li><li>Base64编码 —— <code>url-loader</code></li></ul><p><code>npm i file-loader url-loader img-loader postcss-sprites --save-dev</code></p><h5 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'file-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">            publicPath: <span class="string">''</span>,</span><br><span class="line">            outputPath: <span class="string">'dist/'</span>, <span class="comment">// 设置输出文件地址</span></span><br><span class="line">            useRelativePath: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        publicPath: <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'dist/'</span>, <span class="comment">// 设置输出文件地址</span></span><br><span class="line">        useRelativePath: <span class="literal">true</span>,</span><br><span class="line">        limit: <span class="number">10000</span> <span class="comment">// 10k</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>urL-loader</code> 有<code>file-loader</code>的功能，可以只用<code>url-loader</code></p></blockquote><h5 id="img-loader"><a href="#img-loader" class="headerlink" title="img-loader"></a>img-loader</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        name: <span class="string">'[name]-[hash:5].min.[ext]'</span>, <span class="comment">// 5位hash值</span></span><br><span class="line">        publicPath: <span class="string">''</span>,</span><br><span class="line">        outputPath: <span class="string">'dist/'</span>, <span class="comment">// 设置输出文件地址</span></span><br><span class="line">        useRelativePath: <span class="literal">true</span>,</span><br><span class="line">        limit: <span class="number">10000</span> <span class="comment">// 10k</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'img-loader'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="postcss-sprites"><a href="#postcss-sprites" class="headerlink" title="postcss-sprites"></a>postcss-sprites</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">'postcss'</span>,</span><br><span class="line">        plugins: [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">            spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">            retina: <span class="literal">true</span> <span class="comment">// 1@2x.png</span></span><br><span class="line">          &#125;),</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">'postcss-cssnext'</span>)()</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字体文件处理"><a href="#字体文件处理" class="headerlink" title="字体文件处理"></a>字体文件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">8192</span>,</span><br><span class="line">        name: <span class="string">'resource/[name].[ext]'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      webpack学习笔记
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
</feed>
